{
  "openapi": "3.0.2",
  "info": {
    "description": "Moov is a platform that enables developers to integrate all aspects of money movement with ease and speed. The Moov API makes it simple for platforms to send, receive, and store money. Our API is based upon REST principles, returns JSON responses, and uses standard HTTP response codes. To learn more about how Moov works at a high level, read our [concepts](https://docs.moov.io/guides/concepts/) guide.\n",
    "version": "v0",
    "title": "Moov API",
    "contact": {
      "email": "help@moov.io",
      "url": "https://moov.io"
    },
    "license": {
      "name": "Unlicensed",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://moov.io/images/logo.png",
      "altText": "Moov logo"
    }
  },
  "servers": [
    {
      "url": "https://api.moov.io",
      "description": "Production Environment"
    }
  ],
  "tags": [
    {
      "name": "API authentication",
      "description": "For server-to-server communication, use your API key's public key and secret key with Basic authentication. When using Basic authentication, you don't need to send a scope.\n\nSet the Authorization header to `Basic <credentials>` where credentials is the Base64 encoding of public key and private key joined by a single colon `:`.\n"
    },
    {
      "name": "Access token",
      "description": "When making requests to Moov from a browser, you can use OAuth with JSON Web Tokens (JWT).\n\nOur authentication flow follows the OAuth 2.0 standard. With this endpoint, you'll [create an access token](https://docs.moov.io/guides/quick-start/#create-an-access-token) that you will pass along with API requests or when initializing Moov.js. To generate an authentication token, you’ll need to specify scopes that enable the token to use a specific set of API endpoints. To learn more, read our [scopes guide](https://docs.moov.io/guides/developer-tools/scopes/).\n"
    },
    {
      "name": "Accounts",
      "description": "[Accounts](https://docs.moov.io/guides/accounts/) represent a legal entity (either a business or an individual) in Moov. You can create an account for yourself or set up accounts for others, requesting different [capabilities](https://docs.moov.io/guides/accounts/capabilities/) depending on what you need to be able to do with that account. You can retrieve an account to get details on the business or individual account holder, such as an email address or employer identification number (EIN). \n\nBased on the type of account and its requested capabilities, we have certain [verification requirements](https://docs.moov.io/guides/accounts/identity-verification/). To see what capabilities that account has, you can use the [GET capability endpoint](https://docs.moov.io/api/#operation/getCapability). \n\nWhen you sign up for the Moov Dashboard, you will have a **facilitator account** which can be used to facilitate money movement between other accounts. A facilitator account will not show up in your list of accounts and cannot be created via API. To update your facilitator account information, use the settings page of the Moov Dashboard. \n"
    },
    {
      "name": "Analytics",
      "description": "You can retrieve helpful at-a-glance information about your account by getting metrics on categories such as new accounts, transfer counts, and transfer volume over different time periods. To use this endpoint, you must specify the `/analytics.read` scope.\n"
    },
    {
      "name": "Application",
      "description": "An application allows an account to connect to other accounts and gain access to their information and move money on their behalf.\n"
    },
    {
      "name": "Avatars",
      "description": "You can retrieve an account's profile image. This is especially useful if you'd like to use the profile image for a corresponding account in your own product.\n"
    },
    {
      "name": "Bank accounts",
      "description": "To transfer money with Moov, you’ll need to link a bank account to your Moov account, then verify that account. You can link a bank account to a Moov account by providing the bank account number, routing number, and Moov account ID. \n\nWe require micro-deposit verification to reduce the risk of fraud or unauthorized activity. You can verify a bank account by initiating [micro-deposits](https://docs.moov.io/guides/sources/bank-accounts/#micro-deposit-verification), sending two small credit transfers to the bank account you want to confirm. Note that there is no way to initiate a micro-deposit from your bank of choice. \n\nAlternatively, you can link and verify a bank account in one step through an instant account verification token from a third party provider like [Plaid](https://docs.moov.io/guides/sources/bank-accounts/plaid) or [MX](https://docs.moov.io/guides/sources/bank-accounts/mx/). Bank accounts can have the following statuses: `new`, `pending`, `verified`, `verificationFailed`, `errored`. Learn more by reading our guide on [bank accounts](https://docs.moov.io/guides/sources/bank-accounts/).\n"
    },
    {
      "name": "Capabilities",
      "description": "Capabilities determine what a Moov account can do. Each capability has specific [verification requirements](https://docs.moov.io/guides/accounts/identity-verification/), depending on risk and compliance standards associated with different account activities. For example, there are more information requirements for a business that wants to charge other accounts than for an individual who simply wants to receive funds. When you request a capability, we list the information requirements for that capability. Once you submit the required information, we need to verify the data. Because of this, a requested capability may not immediately become active. For more detailed information on capabilities and capability IDs, read our [capabilities guide](https://docs.moov.io/guides/accounts/capabilities/).\n"
    },
    {
      "name": "Card issuing",
      "x-displayName": "Cards",
      "description": "A Moov wallet can serve as a funding source for issuing virtual cards. Note that we currently only issue Discover cards. Virtual cards can then be used to spend funds from the wallet.\n\n<em> The `card-issuing` and `wallet` capabilities are required to be enabled before any card issuing functionality is available. Moov is in a private beta with select customers for card issuing.</em>\n"
    },
    {
      "name": "Cards",
      "description": "You can link credit or debit cards to Moov accounts. You can use a card as a source for making transfers, which charges the card. To link a card to a Moov account and avoid some of the burden of PCI compliance, use the [card link Moov Drop](https://docs.moov.io/moovjs/drops/card-link). You cannot add a card via the Dashboard. If you're linking a card via API, you must provide Moov with a copy of your PCI attestation of compliance. When testing cards, use the designated [card numbers for test mode](https://docs.moov.io/guides/set-up-your-account/test-mode/#cards). You must contact Moov before going live in production with cards. Read our guide on [cards](https://docs.moov.io/guides/sources/cards/) for more information."
    },
    {
      "name": "Connections",
      "description": "A connection forms a relationship between two accounts, allowing them to transact with each other. When you create an account for someone else, your account automatically has a connection with the account you've just created."
    },
    {
      "name": "Disputes",
      "description": "A [dispute](https://docs.moov.io/guides/money-movement/cards/disputes/) is a situation where a cardholder formally questions a transaction on their account with their card issuer. This could be for a number of reasons ranging from billing errors to fraudulent activity or dissatisfactory goods/services. If the dispute is recognized as legitimate, the issuer will reverse the payment (otherwise known as a chargeback)."
    },
    {
      "name": "Email/Password",
      "description": "Authentication via using a email and password."
    },
    {
      "name": "Enriched address",
      "description": "Search for valid addresses using a partial or full address.\n"
    },
    {
      "name": "Enriched profile",
      "description": "By supplying an email address, you can retrieve a profile with enriched data fields. This service is offered in collaboration with Clearbit.\n"
    },
    {
      "name": "Files",
      "description": "Files can be used for a multitude of different use cases including but not limited to, individual identity verification and business underwriting. You may need to provide documentation to enable capabilities or to keep capabilities enabled for an account. The maximum file size is 10MB. Each account is allowed a maximum of 50 files. Acceptable file types include csv, jpg, pdf, and png. To learn about uploading files in the Moov Dashboard, read our [file upload guide](https://docs.moov.io/guides/dashboard/accounts/#file-upload).\n"
    },
    {
      "name": "Industries",
      "description": "Information about industries and their merchant codes.\n"
    },
    {
      "name": "Institutions",
      "description": "Lookup ACH and wire participating financial institutions. We recommend using this endpoint when an end-user enters a routing number to confirm their bank or credit union.\n"
    },
    {
      "name": "Money movement",
      "description": "Transfer allow you Moov money\n"
    },
    {
      "name": "Moov internal",
      "description": "Meant for internal use by Moov",
      "x-traitTag": true
    },
    {
      "name": "Multi-factor",
      "description": "We require users to multi factor in when using a new device.\n"
    },
    {
      "name": "Open ID Connect",
      "description": "Details on Moov's open id connect implementation"
    },
    {
      "name": "Payment methods",
      "description": "[Payment methods](https://docs.moov.io/guides/money-movement/payment-methods/) represent all of the ways an account can move funds to another Moov account. Payment methods are generated programmatically when a card or bank account is added or the status is updated e.g., `ach-debit-fund` will be added as a payment method once the bank account is verified.\n\n<em>RTP® and Push to Card are not yet generally available on Moov. Contact us for more information.</em>\n"
    },
    {
      "name": "Representatives",
      "description": "We think of a representative as an individual who can take major actions on behalf of a business. A representative can be the business owner, or anyone who owns 25% or more of the business. Some examples of representatives are the CEO, CFO, COO, or president. We require all business accounts to have valid information for at least one representative. Moov accounts must have verified business representatives before a business account can send funds, collect money from other accounts, or store funds in a wallet. To learn more, read our guide on [business representatives](https://docs.moov.io/guides/accounts/business-representatives/).\n"
    },
    {
      "name": "Signup",
      "description": "How to sign a user up via app.moov.io"
    },
    {
      "name": "Transactions",
      "description": "A transaction is a record of a card's activity on a particular Moov account.\n"
    },
    {
      "name": "Transfers",
      "description": "A [transfer](https://docs.moov.io/guides/money-movement/) is the movement of money between Moov accounts, from source to destination. Provided you have linked a bank account which has been verified, you can initiate a transfer to another Moov account. All you need to do is note a [paymentMethod](#tag/Payment-methods), the $ amount of the transfer, and a brief description. With Moov, you can also implement transfer groups, allowing you to associate multiple transfers together and run them sequentially. To learn more, read our guide on [transfer groups](https://docs.moov.io/guides/money-movement/transfer-groups/#transfer-statuses).\n"
    },
    {
      "name": "Underwriting",
      "description": "[Underwriting](https://docs.moov.io/guides/accounts/underwriting) is a tool Moov uses to understand a business’s profile before allowing them to collect funds on our platform. This profile includes information like a description of the company or the merchant’s business model, the industry they operate in, and transaction volume. Through underwriting, we can understand and prevent unnecessary financial risk for Moov and those transacting on our platform. Note that underwriting can be instant, but in some cases make take around 2 business days before approval.\n"
    },
    {
      "name": "User invites",
      "description": "This allows app.moov.io invite new users to an account.\n"
    },
    {
      "name": "Users",
      "description": "Users are lightweight objects that handle signing in to our app.moov.io\n"
    },
    {
      "name": "Wallet transactions",
      "description": "Wallet transactions provide insight into funds that move in and out of an account’s wallet. For each Moov transfer, we create a corresponding transaction that represents how that initial source impacted a wallet. Read more about [wallet transactions](https://docs.moov.io/guides/wallets/transactions).\n"
    },
    {
      "name": "Wallets",
      "description": "A [Moov wallet](https://docs.moov.io/guides/wallet/) can serve as a funding source as you accumulate funds. You can also use the Moov wallet to:\n - Pre-fund transfers for faster payouts\n - Transfer funds between Moov wallets for instantly available funds\n\n <em> If you've requested the `send-funds` or `collect-funds` capability, the `wallet` capability will be automatically requested as well. Read more on the [data requirements for wallets here](https://docs.moov.io/guides/accounts/capabilities/#wallet).</em>\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Authentication",
      "tags": [
        "API authentication",
        "Access token",
        "Ping"
      ]
    },
    {
      "name": "Moov accounts",
      "description": "The Moov account represents an legal entity. It can be either a company or an individual person. Users (which represent a single human) can be assigned to a Moov account.\n",
      "tags": [
        "Accounts",
        "Representatives",
        "Capabilities",
        "Files",
        "Underwriting"
      ]
    },
    {
      "name": "Sources",
      "description": "Information about how to add external connections you can use to top off your Moov balance or payout the balance of your Moov account.\n",
      "tags": [
        "Bank accounts",
        "Cards",
        "Payment methods"
      ]
    },
    {
      "name": "Money movement",
      "description": "How we move money via Moov.\n",
      "tags": [
        "Transfers",
        "Disputes"
      ]
    },
    {
      "name": "Wallets",
      "description": "Everything related to holding money.\n",
      "tags": [
        "Wallets",
        "Wallet transactions"
      ]
    },
    {
      "name": "Card issuing",
      "description": "A Moov wallet can serve as a funding source for issuing virtual cards. Note that we currently only issue Discover cards. Virtual cards can then be used to spend funds from the wallet. \n\n  <em> The `card-issuing` and `wallet` capabilities are required to be enabled before any card issuing functionality is available. Moov is in a private beta with select customers for card issuing.</em>\n",
      "tags": [
        "Card issuing",
        "Transactions"
      ]
    },
    {
      "name": "Analytics",
      "description": "You can retrieve helpful at-a-glance information about your account by getting metrics on categories such as new accounts, transfer counts, and transfer volume over different time periods. To use this endpoint, you must specify the `/analytics.read` scope. You can also view similar metrics on your [Dashboard overview page](https://docs.moov.io/guides/dashboard/).\n",
      "tags": [
        "Analytics"
      ]
    },
    {
      "name": "Institution lookup",
      "description": "Look up financial institutions by routing number.",
      "tags": [
        "Institutions"
      ]
    },
    {
      "name": "Enrichment",
      "description": "Fetch additional information about a specific account.",
      "tags": [
        "Avatars",
        "Enriched address",
        "Enriched profile",
        "Industries"
      ]
    },
    {
      "name": "Moov internal",
      "tags": [
        "Signup",
        "Email/Password",
        "Multi-factor",
        "Session",
        "Verification",
        "Devices",
        "Open ID Connect",
        "Connections",
        "Users",
        "Roles",
        "Invites",
        "Application",
        "Webhooks",
        "Events",
        "Ping",
        "User invites"
      ]
    }
  ],
  "paths": {
    "/signup": {
      "post": {
        "summary": "Self signup",
        "operationId": "selfSignup",
        "description": "Allows a user to sign themselves up off the website. They will receive an email allowing them to create an user to signin with.",
        "tags": [
          "Signup"
        ],
        "requestBody": {
          "description": "Values to register with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signup"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/signin/password": {
      "post": {
        "summary": "Signin a user with email & password",
        "operationId": "SigninWithPassword",
        "description": "Allows a user to signin with a password",
        "tags": [
          "Email/Password"
        ],
        "requestBody": {
          "description": "Values to register with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Signin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The user successfully signed in"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/signin/password/register": {
      "post": {
        "summary": "Register user with password",
        "operationId": "setupPassword",
        "description": "Sets up password authentication",
        "tags": [
          "Email/Password"
        ],
        "requestBody": {
          "description": "Values to register with",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Setup"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "The user successfully registered"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/signin/password/change-password": {
      "post": {
        "summary": "Change password",
        "operationId": "ChangePassword",
        "description": "Allows a user to change their password",
        "tags": [
          "Email/Password"
        ],
        "requestBody": {
          "description": "Current password and new",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePassword"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/signin/password/recover": {
      "post": {
        "summary": "Recover password",
        "operationId": "RecoverPassword",
        "description": "Allows a user recover their account via an email flow",
        "tags": [
          "Email/Password"
        ],
        "requestBody": {
          "description": "Email to send recovery instructions to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Recover"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/signin/password/recover/reset-password": {
      "post": {
        "summary": "Set password for recovery",
        "operationId": "ResetPassword",
        "description": "Allows the user to set a password after recovering their account",
        "tags": [
          "Email/Password"
        ],
        "requestBody": {
          "description": "Email to send recovery instructions to",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPassword"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/signin/oidc/{providerID}": {
      "get": {
        "summary": "Authenticate with OIDC Provider",
        "description": "Initiates the authentication with the Provider specified by `providerID`.\nThis will redirect to the provider who will authenticate the user. Once the provider has authenticated \nthe user it will redirect them back to us on the `/callback` url.\n",
        "operationId": "OIDCAuthentication",
        "tags": [
          "Open ID Connect"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProviderID"
          }
        ],
        "responses": {
          "302": {
            "description": "If using the OpenID Connect or OAuth 2.0 provider it issues a redirect to the providers page.\n",
            "headers": {
              "Location": {
                "schema": {
                  "$ref": "#/components/schemas/URL"
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "",
                  "maxLength": 0,
                  "pattern": "\\s{0}"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/signin/oidc/{providerID}/callback": {
      "get": {
        "summary": "Callback from OIDC Provider",
        "description": "This is called by the users browser once their OpenID Connect provider has authenticated the user. The \nOIDC provider will send tokens we inspect and use to obtain their information and log them into the system.\n",
        "operationId": "OIDCCallback",
        "tags": [
          "Open ID Connect"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/ProviderID"
          }
        ],
        "responses": {
          "302": {
            "description": "Redirects to where we want to send the user to handle verification of device\n",
            "headers": {
              "Location": {
                "schema": {
                  "$ref": "#/components/schemas/URL"
                }
              }
            },
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string",
                  "example": "",
                  "maxLength": 0,
                  "pattern": "\\s{0}"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/verify": {
      "post": {
        "summary": "Device verification",
        "description": "Checks to ensure a device is verified and if not how to go about getting it verified",
        "operationId": "isDeviceVerified",
        "tags": [
          "Verification"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Devices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 300,
                  "items": {
                    "$ref": "#/components/schemas/DeviceVerification"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/verify/email": {
      "post": {
        "summary": "Device verification",
        "description": "Checks to ensure a device is verified and if not how to go about getting it verified",
        "operationId": "checkVerificationCodeFromEmail",
        "tags": [
          "Verification"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyViaEmail"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Devices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeviceVerification"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/auth/verify/email/send": {
      "post": {
        "summary": "Send code via email",
        "description": "Send device verification code via email to the email address of the user",
        "operationId": "sendVerificationCodeViaEmail",
        "tags": [
          "Verification"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendViaEmail"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/oauth2/token": {
      "post": {
        "operationId": "CreateOAuth2Token",
        "summary": "Create access token",
        "description": "Use the client_id and client_secret to generate an access token.",
        "tags": [
          "Access token"
        ],
        "security": [
          {
            "OAuth2Credentials": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenRequest"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully exchanged the code to create a token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "Failure create token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenErrorResponse"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/oauth2/revoke": {
      "post": {
        "operationId": "RevokeOAuth2Token",
        "summary": "Revoke access token",
        "description": "Allows clients to notify the authorization server that a previously obtained refresh or access token is no longer needed",
        "tags": [
          "Access token"
        ],
        "security": [
          {
            "OAuth2Credentials": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/RevokeTokenRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "$ref": "#/components/responses/NoContent"
          },
          "400": {
            "description": "Failed to revoke token"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/session": {
      "get": {
        "summary": "Get current session information",
        "operationId": "getSession",
        "description": "Returns session information if still valid",
        "tags": [
          "Session"
        ],
        "responses": {
          "200": {
            "description": "session information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Delete this session and logout",
        "operationId": "disableSession",
        "description": "Logs out of the current session and disables it",
        "tags": [
          "Session"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/session-refresh": {
      "post": {
        "summary": "Refresh Cookie",
        "description": "Refresh the cookie to keep a user logged in",
        "operationId": "refreshSession",
        "tags": [
          "Devices"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "session information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session"
                }
              }
            }
          }
        }
      }
    },
    "/invites": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        }
      ],
      "get": {
        "summary": "List invites",
        "description": "List outstanding invites for an account",
        "operationId": "listInvites",
        "tags": [
          "Invites"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  },
                  "maxItems": 300,
                  "type": "array"
                }
              }
            },
            "description": "Invites that are outstanding"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "post": {
        "summary": "Send invite",
        "description": "Send an email invite to a user",
        "operationId": "sendInvite",
        "tags": [
          "Invites"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendInvite"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Invite sent"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/invites/{inviteID}": {
      "delete": {
        "summary": "Disable invite",
        "description": "Revoke an invite that was sent and invalidate the token.",
        "operationId": "disableInvite",
        "tags": [
          "Invites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inviteID",
            "required": true,
            "description": "InviteID of the invite to disable",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invite was removed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/invites/{inviteID}/accept": {
      "put": {
        "summary": "Accept invite",
        "description": "Accept an invite and add user to the account",
        "operationId": "acceptInvite",
        "tags": [
          "Invites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inviteID",
            "required": true,
            "description": "InviteID of the invite to accept",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite was accepted"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/invites/{inviteID}/decline": {
      "put": {
        "summary": "Decline invite",
        "description": "Decline an invite",
        "operationId": "declineInvite",
        "tags": [
          "Invites"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "inviteID",
            "required": true,
            "description": "InviteID of the invite to decline",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invite was declined"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/invites/resend": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        }
      ],
      "post": {
        "summary": "Resend invite",
        "description": "Send an email re-invite to a user",
        "operationId": "resendInvite",
        "tags": [
          "Invites"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendInvite"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            },
            "description": "Invite sent"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/confirm/invite": {
      "get": {
        "summary": "Confirm invite",
        "description": "Confirm an invite is valid",
        "operationId": "confirmInvite",
        "tags": [
          "Invites"
        ],
        "responses": {
          "200": {
            "description": "Call was accepted, check response body for verification data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "verified": {
                      "type": "boolean"
                    },
                    "email": {
                      "$ref": "#/components/schemas/Email"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/accounts": {
      "get": {
        "summary": "List accounts",
        "operationId": "listAccounts",
        "description": "List or search accounts to which the caller is connected.<br><br>\nAll supported query parameters are optional. If none are provided\nthe response will include all connected accounts. Pagination is\nsupported via the `skip` and `count` query parameters.<br><br>\nSearching by name and email will overlap and return results based on relevance.\n<br><br> To list connected accounts, you must specify the `/accounts.read` scope when retrieving the authentication token.\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "description": "Filter connected accounts by name.<br><br>\nIf provided, this query will attempt to find matches against the following Account and Profile fields:\n<ul>\n  <li>Account `displayName`</li>\n  <li>Individual Profile `firstName`, `middleName`, and `lastName`</li>\n  <li>Business Profile `legalBusinessName`</li>\n</ul>\n",
            "example": "Frank",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "Filter connected accounts by email address.<br><br>\nProvide the full email address to filter by email.\n",
            "example": "someone@moov.io",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter connected accounts by AccountType.<br><br>\nIf the `type` parameter is used in combination with `name`, only the corresponding type's name fields will be searched.\nFor example, if `type=business` and `name=moov`, the search will attempt to find matches against the display name and Business Profile name fields (`legalBusinessName`, and `doingBusinessAs`).\n",
            "example": "business",
            "schema": {
              "$ref": "#/components/schemas/AccountType"
            }
          },
          {
            "name": "foreignID",
            "in": "query",
            "description": "Serves as an optional alias from a foreign/external system which can be used to reference this resource.\n",
            "example": "4528aba-b9a1-11eb-8529-0242ac13003",
            "schema": {
              "$ref": "#/components/schemas/ForeignID"
            }
          },
          {
            "name": "verification_status",
            "in": "query",
            "description": "Filter by the `verificationStatus` of accounts.\n",
            "example": "resubmit",
            "schema": {
              "$ref": "#/components/schemas/AccountVerificationStatus"
            }
          },
          {
            "name": "includeDisconnected",
            "in": "query",
            "description": "Filter disconnected accounts.<br><br>\nIf true, the response will include disconnected accounts.\n",
            "example": true,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "$ref": "#/components/parameters/Count"
          },
          {
            "$ref": "#/components/parameters/Skip"
          }
        ],
        "responses": {
          "200": {
            "description": "All connected accounts matching the filter parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Account"
                  }
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "post": {
        "summary": "Create account",
        "operationId": "createAccount",
        "description": "You can create accounts for your users by passing the required information to Moov. <br><br> Note that `mode` field is only required when creating a facilitator account. All non-facilitator account creation requests will ignore the mode field provided and be set to the calling facilitator's mode. <br><br> If you are creating an account with the business type \"llc\", \"partnership\", or \"privateCorporation\", you will need to also provide [business representatives](https://docs.moov.io/api/#tag/Representatives) after creating the account for verification purposes. Once you've added your business owners as representatives, you'll then need to [patch your Moov account](https://docs.moov.io/api/#operation/patchAccount) to indicate that ownership information is complete. Read more on our [business verification requirements here](https://docs.moov.io/guides/accounts/business-verification/). <br><br> When creating an account, you will need to specify the `/accounts.write` scope.",
        "tags": [
          "Accounts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            },
            "description": "Account created"
          },
          "409": {
            "description": "ForeignID already associated with another account."
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}": {
      "get": {
        "summary": "Get account",
        "operationId": "getAccount",
        "description": "Retrieves details for the account with the specified ID. <br><br> To get an account, you will need to specify the `/accounts/{accountID}/profile.read` scope.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "The created account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Patch account",
        "operationId": "patchAccount",
        "description": "To patch an account, you must specify the `/accounts/{accountID}/profile.write` scope and provide the changed information.  \n\nWhen **can** profile data be updated:  \n  + For unverified accounts, all profile data can be edited.\n  + During the verification process, missing or incomplete profile data can be edited.\n  + Verified accounts can only add missing profile data.  \n\n  When **can't** profile data be updated:  \n  + Verified accounts cannot change any existing profile data.  \n\nIf you need to update information in a locked state, please contact Moov support.\n",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchAccountRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The patched account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "The request body was invalid."
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "409": {
            "description": "- Account fields locked due to verification status \n - Account type cannot be changed \n - ForeignID already associated with another account"
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/tos-token": {
      "get": {
        "summary": "Get terms of service token",
        "operationId": "getTermsOfServiceToken",
        "description": "Generates a non-expiring token that can then be used to accept Moov's terms of service. This token can only be generated via API. Any Moov account requesting the `collect-funds`, `send-funds`, `wallet`, or `card-issuing` capabilities must accept Moov's terms of service, then have the generated terms of service token patched to the account. Read more in our [docs](https://docs.moov.io/guides/accounts/creating-accounts/#platform-terms-of-service-agreement).",
        "tags": [
          "Accounts"
        ],
        "responses": {
          "200": {
            "description": "The newly generated terms of service token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TermsOfServiceToken"
                }
              }
            }
          },
          "422": {
            "description": "Required request headers were missing or contained unprocessable data"
          }
        }
      }
    },
    "/accounts/{accountID}/countries": {
      "get": {
        "summary": "Get account countries",
        "operationId": "getAccountCountries",
        "description": "Retrieve the specified countries of operation for an account. <br><br> To get the list of countries, you'll need to specify the `/accounts/{accountID}/profile.read` scope.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested countries.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Assign Account Countries",
        "operationId": "assignAccountCountries",
        "description": "Assign the countries of operation for an account. This endpoint will always overwrite the previously assigned values. <br><br> To update the account countries, you'll need to specify the `/accounts/{accountID}/profile.write` scope.",
        "tags": [
          "Accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Countries"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Countries"
                }
              }
            },
            "description": "Countries assigned to account."
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/representatives": {
      "post": {
        "summary": "Create representative",
        "operationId": "createRepresentative",
        "description": "Moov accounts associated with businesses require information regarding individuals who represent the business. You can provide this information by creating a representative. Each account is allowed a maximum of 7 representatives.<br><br> To create a representative, you must specify the `/accounts/{accountID}/representatives.write` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRepresentative"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Representative"
                }
              }
            },
            "description": "Representative created."
          },
          "404": {
            "description": "The specified account or representative was not found."
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List representatives",
        "operationId": "listRepresentatives",
        "description": "A Moov account may have multiple representatives depending on the associated business's ownership and management structure. You can use this method to list all the representatives for a given Moov account. Note that Moov accounts associated with an individual do not have representatives. <br><br> To list representatives, you need to specify the `/accounts/{accountID}/representatives.read` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved representatives",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Representative"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/representatives/{representativeID}": {
      "get": {
        "summary": "Get representative",
        "operationId": "getRepresentative",
        "description": "Retrieve a specific representative associated with a given Moov account. <br><br> To get a representative, you'll need to specify the `/accounts/{accountID}/representatives.read` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/RepresentativeID"
          }
        ],
        "responses": {
          "200": {
            "description": "The representative.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Representative"
                }
              }
            }
          },
          "404": {
            "description": "No representative with the specified representativeID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Delete a representative",
        "operationId": "deleteRepresentative",
        "description": "Deletes a business representative associated with a Moov account. <br><br> To use this endpoint, you'll need to specify the `/accounts/{accountID}/representatives.write` scope.",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/RepresentativeID"
          }
        ],
        "responses": {
          "204": {
            "description": "Representative deleted."
          },
          "404": {
            "description": "The specified account or representative was not found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Patch representative",
        "operationId": "patchRepresentative",
        "description": "If a representative's information has changed you can patch the information associated with a specific representative ID.  \nTo patch a representative, you'll need to specify the `/accounts/{accountID}/representatives.write` scope and provide the changed information.\n\nWhen **can** profile data be updated:  \n  + For unverified representatives, all profile data can be edited.\n  + During the verification process, missing or incomplete profile data can be edited.\n  + Verified representatives can only add missing profile data.  \n\n  When **can't** profile data be updated:  \n  + Verified representatives cannot change any existing profile data.  \n\nIf you need to update information in a locked state, please contact Moov support.\n",
        "tags": [
          "Representatives"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/RepresentativeID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchRepresentativeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Representative"
                }
              }
            },
            "description": "representative patched"
          },
          "404": {
            "description": "The specified account or representative was not found."
          },
          "409": {
            "description": "Representative fields locked due to verification status."
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/users/{userID}": {
      "get": {
        "summary": "Get user",
        "operationId": "getUser",
        "description": "Returns the specific user if they have access",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "description": "UserID of the user to load",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Update User",
        "operationId": "updateUser",
        "description": "Updates the specific user with the new values",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "description": "UserID of the user to update",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user requested",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUser"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/users/{userID}/accounts": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        }
      ],
      "get": {
        "summary": "Get accounts user has access to",
        "operationId": "getUserAccounts",
        "description": "Returns the list of accounts a user has access to",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "description": "UserID of the user to load",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "user requested",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "A list of accessible accounts by that user",
                  "items": {
                    "$ref": "#/components/schemas/UserAccount"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/users/{userID}/invites": {
      "get": {
        "summary": "Get pending invites sent for user",
        "operationId": "getUserInvites",
        "description": "Returns the pending invitiations sent to the user by user on other accounts",
        "tags": [
          "Users"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "description": "UserID of the user to load",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pending invites",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "A list of pending invites",
                  "items": {
                    "$ref": "#/components/schemas/UserInvite"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/roles": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        }
      ],
      "get": {
        "operationId": "listRoles",
        "summary": "List roles",
        "description": "Retrieve all roles for the account",
        "tags": [
          "Roles"
        ],
        "responses": {
          "200": {
            "description": "Roles that are outstanding",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 300,
                  "items": {
                    "$ref": "#/components/schemas/Role"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "post": {
        "operationId": "createRole",
        "summary": "Create role",
        "description": "Add a new role for the account",
        "tags": [
          "Roles"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/roles/{roleID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        },
        {
          "in": "path",
          "name": "roleID",
          "description": "ID of the role to update",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      ],
      "get": {
        "operationId": "getRole",
        "summary": "Get Role",
        "description": "Retrieve a specific Role under the account",
        "tags": [
          "Roles"
        ],
        "responses": {
          "200": {
            "description": "Roles that are outstanding",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "operationId": "updateRole",
        "summary": "Update role",
        "description": "Modify an existing Role for the account",
        "tags": [
          "Roles"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRole"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Role was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Role"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "operationId": "disableRole",
        "summary": "Delete role",
        "description": "Disable a Role under the account",
        "tags": [
          "Roles"
        ],
        "responses": {
          "204": {
            "description": "Role was removed."
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/members": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        }
      ],
      "get": {
        "operationId": "Members.list",
        "summary": "List members",
        "description": "Retrieve all members connected to the account",
        "tags": [
          "Roles"
        ],
        "responses": {
          "200": {
            "description": "Member Users connected to the account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 300,
                  "items": {
                    "$ref": "#/components/schemas/Member"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/users/{userID}/devices": {
      "get": {
        "summary": "Devices for a user",
        "description": "Returns the list of devices that are currently remembered",
        "operationId": "listDevicesForUser",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "description": "Which userID to list the devices of",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devices",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 300,
                  "items": {
                    "$ref": "#/components/schemas/Device"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/users/{userID}/devices/{deviceID}": {
      "get": {
        "summary": "Specific device",
        "description": "Get Information on a specific device",
        "operationId": "getDeviceForUser",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "description": "Which userID to list the devices of",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "in": "path",
            "name": "deviceID",
            "required": true,
            "description": "Which device that belongs to the user to get",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Devices",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Device"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Disable device",
        "description": "Disable a specific device",
        "operationId": "disableDeviceForUser",
        "tags": [
          "Devices"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "userID",
            "required": true,
            "description": "Which userID to list the devices of",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          {
            "in": "path",
            "name": "deviceID",
            "required": true,
            "description": "Which device that belongs to the user to get",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/applications": {
      "post": {
        "summary": "Enable this account as a application provider",
        "description": "Enable this account as a application provider",
        "operationId": "enableApplication",
        "tags": [
          "Application"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List applications",
        "description": "List applications for an account",
        "operationId": "listApplications",
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "description": "Applications attached to this account",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Application"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/applications/{applicationID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ApplicationID"
        }
      ],
      "put": {
        "summary": "Update an application",
        "description": "Updates an application",
        "operationId": "updateApplication",
        "tags": [
          "Application"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplication"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created application",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Disables an application",
        "description": "Disables an application",
        "operationId": "disableApplication",
        "tags": [
          "Application"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Disabled"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/applications/{applicationID}/keys": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ApplicationID"
        }
      ],
      "get": {
        "summary": "List keys for an application",
        "description": "Lists keys for an application",
        "operationId": "listApplicationKeys",
        "tags": [
          "Application"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/ApplicationKey"
                  },
                  "maxItems": 10,
                  "type": "array"
                }
              }
            },
            "description": "Keys attached to this application and account"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "post": {
        "summary": "Create a new application key",
        "description": "Create a new application key that can be used for OAuth 2.0 authentication",
        "operationId": "createApplicationKeys",
        "tags": [
          "Application"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedApplicationKey"
                }
              }
            },
            "description": "Invite sent"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/applications/{applicationID}/keys/{applicationKeyID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/ApplicationID"
        },
        {
          "$ref": "#/components/parameters/ApplicationKeyID"
        }
      ],
      "delete": {
        "summary": "Disables an application key",
        "description": "Disables an application key",
        "operationId": "disableApplicationKey",
        "tags": [
          "Application"
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/Disabled"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Updates an application key",
        "description": "Updates an application key",
        "operationId": "updateApplicationKey",
        "tags": [
          "Application"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplicationKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationKey"
                }
              }
            },
            "description": "Application key updated"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/connections": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        }
      ],
      "get": {
        "summary": "List connections",
        "description": "Lists all the accounts that a specific account is connected to.",
        "operationId": "listConnections",
        "tags": [
          "Connections"
        ],
        "responses": {
          "200": {
            "description": "Connections",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 300,
                  "items": {
                    "$ref": "#/components/schemas/Connection"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/wallets": {
      "get": {
        "summary": "List wallets",
        "description": "List the wallets associated with a Moov account. <br><br> To list wallets, you'll need to specify the `/accounts/{accountID}/wallets.read` scope.",
        "operationId": "listWalletsForAccount",
        "tags": [
          "Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallets associated with the given account",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Wallet"
                  },
                  "maxItems": 10,
                  "type": "array"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/wallets/{walletID}": {
      "get": {
        "summary": "Get wallet",
        "description": "Get information on a specific wallet (e.g., the available balance). <br><br> To get wallet information, you'll need to specify the `/accounts/{accountID}/wallets.read` scope.",
        "operationId": "getWalletForAccount",
        "tags": [
          "Wallets"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/WalletID"
          }
        ],
        "responses": {
          "200": {
            "description": "Wallets associated with the given account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Wallet"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/wallets/{walletID}/transactions": {
      "get": {
        "summary": "List wallet transactions",
        "description": "List all the transactions associated with a particular Moov wallet. <br><br> To access this endpoint, you'll need to specify the `/accounts/{accountID}/wallets.read` scope.",
        "operationId": "listWalletTransactions",
        "tags": [
          "Wallet transactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/WalletID"
          },
          {
            "description": "Optional parameter to filter by transaction type.",
            "example": "card-payment",
            "in": "query",
            "name": "transactionType",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to filter by source type (i.e. transfer, dispute, issuing-transaction).",
            "example": "dispute",
            "in": "query",
            "name": "sourceType",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to filter by source ID.",
            "example": "9506dbf6-4208-44c3-ad8a-e4431660e1f2",
            "in": "query",
            "name": "sourceID",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to filter by status (`pending` or `completed`).",
            "example": "pending",
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Optional parameter to limit the number of results in the query.",
            "example": 10,
            "in": "query",
            "name": "count",
            "schema": {
              "default": 20,
              "type": "integer"
            }
          },
          {
            "description": "The number of items to offset before starting to collect the result set.",
            "example": 10,
            "in": "query",
            "name": "skip",
            "schema": {
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "createdStartDateTime",
            "description": "Optional date-time which inclusively filters all transactions created after this date-time.",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "example": "2009-11-10T23:00:00Z"
          },
          {
            "in": "query",
            "name": "createdEndDateTime",
            "description": "Optional date-time which exclusively filters all transactions created before this date-time.",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "example": "2009-11-13T01:00:00Z"
          },
          {
            "in": "query",
            "name": "completedStartDateTime",
            "description": "Optional date-time which inclusively filters all transactions completed after this date-time.",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "example": "2009-11-10T23:00:00Z"
          },
          {
            "in": "query",
            "name": "completedEndDateTime",
            "description": "Optional date-time which exclusively filters all transactions completed before this date-time.",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "example": "2009-11-13T01:00:00Z"
          }
        ],
        "responses": {
          "200": {
            "description": "Transactions associated with the wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/WalletTransaction"
                  },
                  "maxItems": 100,
                  "type": "array"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/wallets/{walletID}/transactions/{transactionID}": {
      "get": {
        "summary": "Get wallet transaction",
        "description": "Get details on a specific wallet transaction. <br><br> To access this endpoint, you'll need to specify the `/accounts/{accountID}/wallets.read` scope.",
        "operationId": "getWalletTransaction",
        "tags": [
          "Wallet transactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/WalletID"
          },
          {
            "in": "path",
            "name": "transactionID",
            "required": true,
            "description": "ID associated with the wallet transaction.",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction associated with the wallet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WalletTransaction"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfers": {
      "post": {
        "summary": "Create a transfer",
        "description": "Move money by providing the source, destination, and amount in the request body. <br><br> To create a transfer, you must specify the `/accounts/{yourAccountID}/transfers.write` scope. <br> You can find your account id on the [Business details](https://dashboard.moov.io/settings/business) page.",
        "operationId": "createTransfer",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Idempotency-Key",
            "description": "Prevents duplicate transfers from being created. Note that we only accept UUID v4.",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "X-Wait-For",
            "description": "Optional header that indicates whether to return a synchronous response that includes full transfer and rail-specific details or an asynchronous response indicating the transfer was created (this is the default response if the header is omitted).",
            "schema": {
              "$ref": "#/components/schemas/WaitFor"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransfer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransferPostResponse"
                }
              }
            }
          },
          "201": {
            "description": "A transfer was successfully created but an error occurred while generating the synchronous response. The asynchronous response object will be returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTransfer"
                }
              }
            }
          },
          "202": {
            "description": "A transfer was successfully created but a timeout occurred while waiting for a synchronous response. Rail-specific details may be missing from the response object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "409": {
            "description": "Attempted to create a transfer using a duplicate X-Idempotency-Key header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List transfers",
        "description": "List all the transfers associated with a particular Moov account. <br><br> To list transfers, you must specify the `/accounts/{yourAccountID}/transfers.read` scope. The accountID included must be your facilitator accountID. <br> You can find your accountID on the [Business details](https://dashboard.moov.io/settings/business) page. <br><br> When you run this request, you retrieve 200 transfers at a time. You can advance past a results set of 200 transfers by using the `skip` parameter (for example, if you set `skip`= 10, you will see a results set of 200 transfers after the first 2000). If you are searching a high volume of transfers, the request will likely process very slowly. To achieve faster performance, restrict the data as much as you can by using the `StartDateTime` and `EndDateTime` parameters for a limited period of time. You can run multiple requests in smaller time window increments until you've retrieved all the transfers you need.",
        "operationId": "listTransfers",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "List of transfers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransfers"
                },
                "examples": {
                  "listTransfers": {
                    "$ref": "#/components/examples/listTransfers"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        },
        "parameters": [
          {
            "in": "query",
            "name": "accountIDs",
            "schema": {
              "type": "string"
            },
            "allowReserved": true,
            "description": "Optional, comma-separated account IDs in which the response is filtered based on whether the account ID is the source or destination.",
            "example": "9506dbf6-4208-44c3-ad8a-e4431660e1f2,3f9969cf-a1f3-4d83-8ddc-229a506651cf,9fdb70f8-79f5-4016-853e-34c40c3b09b0"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/TransferStatus"
            },
            "description": "Optional parameter for filtering transfers by status."
          },
          {
            "in": "query",
            "name": "startDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time which inclusively filters all transfers created after this date-time.",
            "example": "2009-11-10T23:00:00Z"
          },
          {
            "in": "query",
            "name": "endDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time which exclusively filters all transfers created before this date-time.",
            "example": "2009-11-13T01:00:00Z"
          },
          {
            "in": "query",
            "name": "groupID",
            "schema": {
              "type": "string"
            },
            "description": "Optional ID to filter for transfers in the same group.",
            "example": "683660e3-218c-4f5a-b193-930bd6d2f98e"
          },
          {
            "$ref": "#/components/parameters/parameters-Count"
          },
          {
            "$ref": "#/components/parameters/Skip"
          },
          {
            "in": "query",
            "name": "refunded",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional parameter to only return refunded transfers.",
            "example": false
          },
          {
            "in": "query",
            "name": "disputed",
            "schema": {
              "type": "boolean"
            },
            "description": "Optional parameter to only return disputed transfers.",
            "example": false
          }
        ]
      }
    },
    "/transfers/{transferID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/parameters-AccountID"
        },
        {
          "$ref": "#/components/parameters/TransferID"
        }
      ],
      "get": {
        "summary": "Get a transfer",
        "description": "Retrieve full transfer details such as the amount, source, and destination. Payment rail-specific details are included in the source and destination. <br><br> To get a transfer, you must specify the `/accounts/{yourAccountID}/transfers.read` scope. The accountID included must be your facilitator accountID. <br> You can find your accountID on the [Business details](https://dashboard.moov.io/settings/business) page.",
        "operationId": "getTransfer",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Details of a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                },
                "examples": {
                  "card-to-wallet": {
                    "$ref": "#/components/examples/getTransferCardToWallet"
                  },
                  "bank-to-wallet": {
                    "$ref": "#/components/examples/getTransferBankToWallet"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Patch transfer metadata",
        "description": "Update the metadata contained on a transfer <br><br> To patch a transfer, you must specify the `/accounts/{yourAccountID}/transfers.write` scope. The accountID included must be your facilitator accountID. <br> You can find your account ID on the [Business details](https://dashboard.moov.io/settings/business) page.",
        "operationId": "patchTransfer",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchTransfer"
              }
            }
          }
        },
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Details of a transfer.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTransferFull"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfer-options": {
      "post": {
        "summary": "Generate transfer options",
        "description": "Generate available payment method options for one or multiple transfer participants depending on the accountID or paymentMethodID you supply in the request. <br><br> To get transfer options, you must specify the `/accounts/{yourAccountID}/transfers.read` scope. The accountID you include should be associated with the facilitator account. <br> You can find your accountID on the [Business details](https://dashboard.moov.io/settings/business) page.\n",
        "operationId": "createTransferOptions",
        "tags": [
          "Transfers"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTransferOptions"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Succesfully created transfer options.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedTransferOptions"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfers/{transferID}/refunds": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TransferID"
        }
      ],
      "post": {
        "summary": "Refund a transfer",
        "description": "<strong>Use the <a href=\"index.html#tag/Transfers/operation/reverseTransfer\">Cancel or refund a card transfer</a> endpoint for more comprehensive cancel and refund options.</strong> <br><br> Initiate a refund for a card transfer <br><br> To initiate a refund, you will need to specify the `/accounts/{accountID}/transfers.write` scope.",
        "operationId": "refundTransfer",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "X-Idempotency-Key",
            "description": "Prevents duplicate refunds from being created. Note that we only accept UUID v4.",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "X-Wait-For",
            "description": "Optional header that indicates whether to return a synchronous response that includes the full refund and card transaction details or an asynchronous response indicating the refund was created (this is the default response if the header is omitted).",
            "schema": {
              "$ref": "#/components/schemas/WaitFor"
            }
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRefund"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated a card refund.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundPostResponse"
                },
                "examples": {
                  "synchronous-success": {
                    "$ref": "#/components/examples/createSyncRefundSuccess"
                  },
                  "synchronous-failure": {
                    "$ref": "#/components/examples/createSyncRefundFailure"
                  },
                  "asynchronous": {
                    "$ref": "#/components/examples/createAsyncRefund"
                  }
                }
              }
            }
          },
          "202": {
            "description": "A refund was successfully created but an error occurred while waiting for a synchronous response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefund"
                },
                "examples": {
                  "timeout-created": {
                    "$ref": "#/components/examples/createSyncRefundTimeout"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Error"
          },
          "409": {
            "description": "Attempted to initiate a refund using a duplicate X-Idempotency-Key header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefund"
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "Get a list of refunds for a card transfer",
        "description": "Get a list of refunds for a card transfer.",
        "operationId": "getRefunds",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "List of refunds.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefunds"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfers/{transferID}/refunds/{refundID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/TransferID"
        },
        {
          "$ref": "#/components/parameters/RefundID"
        }
      ],
      "get": {
        "summary": "Get refund details",
        "description": "Get details of a refund for a card transfer.",
        "operationId": "getRefund",
        "tags": [
          "Transfers"
        ],
        "responses": {
          "200": {
            "description": "Details about a particular refund.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRefund"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/transfers/{transferID}/reversals": {
      "post": {
        "summary": "Cancel or refund a card transfer",
        "description": "Reverses a card transfer by initiating a cancellation or refund depending on the transaction status.",
        "operationId": "reverseTransfer",
        "tags": [
          "Transfers"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/TransferID"
          },
          {
            "in": "header",
            "name": "X-Idempotency-Key",
            "description": "Prevents duplicate reversals from being created.",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            },
            "required": true
          }
        ],
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReversal"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated a reversal.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedReversal"
                },
                "examples": {
                  "cancellation-success": {
                    "$ref": "#/components/examples/createCancellationSuccess"
                  },
                  "refund-success": {
                    "$ref": "#/components/examples/createSyncRefundSuccess"
                  }
                }
              }
            }
          },
          "202": {
            "description": "Successfully initiated a reversal but an error occurred while waiting for a synchronous response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedReversal"
                }
              }
            }
          },
          "400": {
            "description": "Reversal request failed, an error message will be available in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "reversal-failure": {
                    "value": {
                      "error": "reversal request failed, please try again with a new idempotency key"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Attempted to initiate a reversal using a duplicate X-Idempotency-Key header.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatedReversal"
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/bank-accounts": {
      "post": {
        "summary": "Bank account",
        "operationId": "bankAccount",
        "description": "Link a bank account to an existing Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BankAccountPayload"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                }
              }
            },
            "description": "Bank account added."
          },
          "404": {
            "description": "No Account with the specified accountID was found"
          },
          "409": {
            "description": "- Unable to get bank name for routing number \n - Duplicate bank account"
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List bank accounts",
        "operationId": "listBankAccounts",
        "description": "List all the bank accounts associated with a particular Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.read` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bank accounts.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccounts"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/bank-accounts/{bankAccountID}": {
      "get": {
        "summary": "Get bank account",
        "operationId": "getBank",
        "description": "Retrieve bank account details (i.e. routing number or account type) associated with a specific Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.read` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved bank account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BankAccountResponse"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Delete bank account",
        "operationId": "deleteBank",
        "description": "Discontinue using a specified bank account linked to a Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "responses": {
          "204": {
            "description": "Bank account deleted."
          },
          "404": {
            "description": "No bank account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/bank-accounts/{bankAccountID}/micro-deposits": {
      "post": {
        "summary": "Initiate micro-deposits",
        "operationId": "initiateMicroDeposits",
        "description": "Micro-deposits help confirm bank account ownership, helping reduce fraud and the risk of unauthorized activity. Use this method to initiate the micro-deposit verification, sending two small credit transfers to the bank account you want to confirm. If you request micro-deposits before 4:15PM ET, they will appear that same day. If you request micro-deposits any time after 4:15PM ET, they will appear the next banking day. When the two credits are initiated, Moov simultaneously initiates a debit to recoup the micro-deposits.<br><br> `sandbox` - Micro-deposits initiated for a `sandbox` bank account will always be `$0.00` / `$0.00` and instantly verifiable once initiated. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "responses": {
          "204": {
            "description": "Micro-deposits successfully initiated."
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "422": {
            "description": "The bank account is not a bank account or is already pending verification."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Complete micro-deposits",
        "operationId": "completeMicroDeposits",
        "description": "Complete the micro-deposit validation process by passing the amounts of the two transfers within three tries. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/bank-accounts.write` scope.",
        "tags": [
          "Bank accounts"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/BankAccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CompleteMicroDepositsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Micro-Deposits Successfully verified",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompleteMicroDepositsResponse"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found or micro-deposits have not been sent for the source."
          },
          "409": {
            "description": "The amounts provided are incorrect or the bank account is in an unexpected state."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/cards": {
      "post": {
        "summary": "Link card",
        "operationId": "card",
        "description": "Link a card to an existing Moov account. Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance. \n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/cards.write` scope.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "in": "header",
            "name": "X-Wait-For",
            "description": "Optional header that indicates whether to return a synchronous response or an asynchronous response.",
            "schema": {
              "$ref": "#/components/schemas/schemas-WaitFor"
            },
            "required": false
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            },
            "description": "Card linked."
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "409": {
            "description": "Attempted to link card that already exists on the account."
          },
          "422": {
            "description": "The supplied card data appeared invalid or was declined by the issuer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                },
                "examples": {
                  "input-validation-failed": {
                    "value": {
                      "cardCvv": "must contain digits only",
                      "cardNumber": "must be a valid card number"
                    }
                  },
                  "card-declined": {
                    "value": {
                      "error": "card verification failure: card-not-activated"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List cards",
        "operationId": "listCards",
        "description": "List all the cards associated with a Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/cards.read` scope.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved cards.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Cards"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/cards/{cardID}": {
      "get": {
        "summary": "Get card",
        "operationId": "getCard",
        "description": "Fetch a specific card associated with a Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/cards.read` scope.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved card.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Update card",
        "operationId": "updateCard",
        "description": "Update a linked card and/or resubmit it for verification. If a value is provided for CVV, \na new verification ($0 authorization) will be submitted for the card. Updating the expiration date or \naddress will update the information stored on file for the card but will not be verified. \nOnly use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance. \n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/cards.write` scope.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CardUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Card updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "404": {
            "description": "No card with the specified accountID was found."
          },
          "409": {
            "description": "Attempting to update an existing disabled card."
          },
          "422": {
            "description": "The supplied card data appeared invalid or was declined by the issuer.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {}
                },
                "examples": {
                  "input-validation-failed": {
                    "value": {
                      "cardCvv": "must contain digits only"
                    }
                  },
                  "cvv-no-match": {
                    "value": {
                      "error": "issue with information provided"
                    }
                  },
                  "card-declined": {
                    "value": {
                      "error": "card re-verification failure: do-not-honor"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Disable card",
        "operationId": "deleteCard",
        "description": "Disables a card associated with a Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/cards.write` scope.",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CardID"
          }
        ],
        "responses": {
          "204": {
            "description": "Card disabled."
          },
          "404": {
            "description": "No card with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/apple-pay/domains": {
      "post": {
        "summary": "Register Apple Pay domains",
        "operationId": "registerApplePayMerchantDomains",
        "description": "Add domains to be registered with Apple Pay.\n<br><br> Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/money-movement/cards/apple-pay/#step-1-register-your-domains) with Apple.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/apple-pay.write` scope.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterApplePayMerchantDomains"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePayMerchantDomains"
                }
              }
            },
            "description": "Domains registered with Apple Pay"
          },
          "400": {
            "description": "The request body was invalid."
          },
          "409": {
            "description": "Apple Pay domains already registered for this account."
          },
          "417": {
            "description": "Domain(s) not [verified](https://docs.moov.io/guides/money-movement/cards/apple-pay/#step-1-register-your-domains) with Apple."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Update Apple Pay domains",
        "operationId": "updateApplePayMerchantDomains",
        "description": "Add or remove domains to be registered with Apple Pay.\n<br><br> Any domains that will be used to accept payments must first be [verified](https://docs.moov.io/guides/money-movement/cards/apple-pay/#step-1-register-your-domains) with Apple.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/apple-pay.write` scope.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateApplePayMerchantDomains"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successfully updated domains registered with Apple Pay."
          },
          "400": {
            "description": "The request body was invalid."
          },
          "404": {
            "description": "No Apple Pay domains registered for this account were found."
          },
          "417": {
            "description": "Domain(s) not [verified](https://docs.moov.io/guides/money-movement/cards/apple-pay/#step-1-register-your-domains) with Apple."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "Get Apple Pay domains",
        "operationId": "getApplePayMerchantDomains",
        "description": "Get domains registered with Apple Pay.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/apple-pay.read` scope.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePayMerchantDomains"
                }
              }
            },
            "description": "Domains registered with Apple Pay"
          },
          "404": {
            "description": "No Apple Pay domains registered for this account were found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/apple-pay/sessions": {
      "post": {
        "summary": "Create Apple Pay session",
        "operationId": "createApplePaySession",
        "description": "Create a session with Apple Pay to facilitate a payment.\nA successful response from this endpoint should be passed through to Apple Pay unchanged.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/apple-pay.write` scope.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplePaySession"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePaySession"
                }
              }
            },
            "description": "Session created with Apple Pay."
          },
          "422": {
            "description": "An error occurred when linking an Apple Pay token."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/apple-pay/tokens": {
      "post": {
        "summary": "Link Apple Pay token",
        "operationId": "linkApplePayToken",
        "description": "Connect an Apple Pay token to the specified account.\nThe `token` data is defined by Apple Pay and should be passed through from Apple Pay's response unmodified.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/cards.write` scope.\n",
        "tags": [
          "Cards"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LinkApplePay"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LinkedApplePayPaymentMethod"
                }
              }
            },
            "description": "Apple Pay token linked"
          },
          "422": {
            "description": "An error occurred when linking an Apple Pay token."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/network-ids": {
      "get": {
        "summary": "Get network IDs of an account",
        "operationId": "getNetworkIDs",
        "description": "Retrieves network IDs for the account of the specified ID. \n<br><br> To get an account, you will need to specify the `/accounts/{accountID}/profile.read` scope.\n",
        "tags": [
          "Moov Internal"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "The network IDs of the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkIDs"
                }
              }
            }
          },
          "404": {
            "description": "No Account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/issued-cards": {
      "post": {
        "summary": "Request card",
        "operationId": "requestCard",
        "description": "Request a virtual card be created.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/issued-cards.write` scope.\n",
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestCard"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCard"
                }
              }
            },
            "description": "Card created"
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List issued cards",
        "operationId": "listIssuedCards",
        "description": "List Moov issued cards existing for the account.\n<br><br> All supported query parameters are optional.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/issued-cards.read` scope.\n",
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "name": "states",
            "in": "query",
            "description": "Optional, comma-separated states to filter the Moov list issued cards response.\n",
            "example": "active,pending-verification",
            "schema": {
              "$ref": "#/components/schemas/IssuedCardState"
            }
          },
          {
            "$ref": "#/components/parameters/parameters-Count"
          },
          {
            "$ref": "#/components/parameters/Skip"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCards"
                }
              }
            },
            "description": "Successfully retrieved cards"
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/issued-cards/{issuedCardID}": {
      "get": {
        "summary": "Get issued card",
        "operationId": "getIssuedCard",
        "description": "Retrieve a single issued card associated with a Moov account.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/issued-cards.read` scope.\n",
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/IssuedCardID"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCard"
                }
              }
            },
            "description": "Successfully retrieved card."
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "patch": {
        "summary": "Update issued card",
        "operationId": "updateIssuedCard",
        "description": "Update a Moov issued card.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/issued-cards.write` scope.\n",
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/IssuedCardID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIssuedCard"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successfully updated issued card."
          },
          "404": {
            "description": "No issued card with the specified accountID and cardID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/issued-cards/{issuedCardID}/details": {
      "get": {
        "summary": "Get full card details",
        "operationId": "getFullIssuedCard",
        "description": "Get issued card with PAN, CVV, and expiration. Only use this endpoint if you have provided Moov with a copy of your PCI attestation of compliance.\n<br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/issued-cards.read-secure` scope.\n",
        "tags": [
          "Card issuing"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/IssuedCardID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved card details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FullIssuedCard"
                }
              }
            }
          },
          "404": {
            "description": "No issued card with the specified accountID and cardID was found. An error will be returned\nfor cards without PAN or CVV. Pending cards will not have a PAN or CVV.\n"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/issuing/{accountID}/transactions": {
      "get": {
        "summary": "Get account transactions",
        "operationId": "listAccountIssuedCardTransactions",
        "description": "List issued card transactions associated with a Moov account.\n",
        "tags": [
          "Transactions"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/parameters-Count"
          },
          {
            "$ref": "#/components/parameters/Skip"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Optional parameters to filter results IssuedCardTransactions.",
            "example": "declined",
            "schema": {
              "$ref": "#/components/schemas/IssuedCardTransactionStatus"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuedCardTransactions"
                }
              }
            },
            "description": "Successfully retrieved issued card transactions."
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/disputes": {
      "get": {
        "summary": "List of all disputes",
        "description": "Returns the list of disputes. <br><br> To use this endpoint, you need to specify the `/accounts/{your-account-id}/transfers.read` scope.",
        "operationId": "listDisputes",
        "tags": [
          "Disputes"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/parameters-Count"
          },
          {
            "$ref": "#/components/parameters/Skip"
          },
          {
            "in": "query",
            "name": "respondStartDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time which inclusively filters all disputes with respond by after this date-time.",
            "example": "2009-11-10T23:00:00Z"
          },
          {
            "in": "query",
            "name": "respondEndDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time which exclusively filters all disputes with respond by before this date-time.",
            "example": "2009-11-13T01:00:00Z"
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "$ref": "#/components/schemas/DisputeStatus"
            },
            "description": "Optional dispute status by which to filter the disputes."
          },
          {
            "in": "query",
            "name": "merchantAccountID",
            "description": "Optional parameter to filter by merchant account ID.",
            "example": "9506dbf6-4208-44c3-ad8a-e4431660e1f2",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "cardholderAccountID",
            "description": "Optional parameter to filter by cardholder account ID.",
            "example": "9506dbf6-4208-44c3-ad8a-e4431660e1f2",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "startDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time parameter to filter all disputes created on and after the provided date and time.",
            "example": "2009-11-10T23:00:00Z"
          },
          {
            "in": "query",
            "name": "endDateTime",
            "schema": {
              "type": "string",
              "format": "ISO-8601"
            },
            "description": "Optional date-time parameter to filter all disputes created on and before the provided date and time.",
            "example": "2009-11-13T01:00:00Z"
          },
          {
            "$ref": "#/components/parameters/OrderBy"
          }
        ],
        "responses": {
          "200": {
            "description": "List of dispute details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "maxItems": 300,
                  "items": {
                    "$ref": "#/components/schemas/Dispute"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/disputes/{disputeID}": {
      "get": {
        "summary": "Dispute by ID",
        "description": "Returns a user's dispute by ID. <br><br> To use this endpoint, you need to specify the `/accounts/{your-account-id}/transfers.read` scope.",
        "operationId": "getDispute",
        "tags": [
          "Disputes"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "disputeID",
            "required": true,
            "description": "ID of dispute",
            "schema": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dispute details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dispute"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/files": {
      "post": {
        "summary": "Upload file",
        "operationId": "uploadFile",
        "description": "Upload a file and link it to the provided Moov account. The maximum file size is 10MB. Each account is allowed a maximum of 50 files. Acceptable file types include csv, jpg, pdf, and png. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/files.write` scope.",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/FileUploadRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            },
            "description": "File added."
          },
          "400": {
            "description": "The image provided could not be serialized."
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "get": {
        "summary": "List files",
        "operationId": "listFiles",
        "description": "List all the files associated with a particular Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/files.read` scope.",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved files.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Files"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/files/{fileID}": {
      "get": {
        "summary": "Get file details",
        "operationId": "getFileDetails",
        "description": "Retrieve file details associated with a specific Moov account. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/files.read` scope.",
        "tags": [
          "Files"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/FileID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved file details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/underwriting": {
      "get": {
        "summary": "Retrieve underwriting details",
        "operationId": "getUnderwriting",
        "description": "Retrieve underwriting associated with a given Moov account. <br><br> To get an account's underwriting details, you'll need to specify the `/accounts/{accountID}/underwriting.read` scope.",
        "tags": [
          "Underwriting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "Underwriting details successfully retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Underwriting"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "put": {
        "summary": "Update underwriting details",
        "operationId": "updateUnderwriting",
        "description": "Update the account's underwriting by passing new values for one or more of the fields. <br><br> To update an account's underwriting details, you'll need to specify the `/accounts/{accountID}/profile.write` scope.",
        "tags": [
          "Underwriting"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnderwritingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The underwriting details were successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Underwriting"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "409": {
            "description": "The account is currently in a state where underwriting details cannot be updated"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/payment-methods": {
      "get": {
        "summary": "List payment methods",
        "operationId": "getPaymentMethods",
        "description": "Retrieve a list of payment methods associated with a Moov account. <br><br> To list payment methods, you must specify the `/accounts/{accountID}/payment-methods.read` scope.",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "name": "sourceID",
            "in": "query",
            "required": false,
            "description": "Optional parameter to filter the account's payment methods by source ID. A source ID can be a [walletID](https://docs.moov.io/api/#tag/Wallets/operation/getWalletForAccount), [cardID](https://docs.moov.io/api/#tag/Cards/operation/getCard), or [bankAccountID](https://docs.moov.io/api/#tag/Bank-accounts/operation/getBank).",
            "example": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved payment methods",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethods"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/payment-methods/{paymentMethodID}": {
      "get": {
        "summary": "Get payment method",
        "operationId": "getPaymentMethod",
        "description": "Get the specified payment method associated with a Moov account. <br><br> To get a payment method, you must specify the `/accounts/{accountID}/payment-methods.read` scope.",
        "tags": [
          "Payment methods"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/PaymentMethodID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved payment method",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            }
          },
          "404": {
            "description": "No payment method with the specified accountID was found"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/capabilities/{capabilityID}": {
      "get": {
        "summary": "Get capability for account",
        "operationId": "getCapability",
        "description": "Retrieve a specific capability that an account has requested. <br><br> To use this endpoint, you must specify the `/accounts/{accountID}/capabilities.read` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CapabilityID"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested capability.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Capability"
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified capabilityID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "delete": {
        "summary": "Disable a capability for an account.",
        "operationId": "disableCapability",
        "description": "Disable a specific capability that an account has requested. <br><br> To use this endpoint, you must specify the `/accounts/{accountID}/capabilities.write` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          },
          {
            "$ref": "#/components/parameters/CapabilityID"
          }
        ],
        "responses": {
          "204": {
            "description": "The capability has been disabled."
          },
          "404": {
            "description": "No account with the specified capabilityID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/accounts/{accountID}/capabilities": {
      "get": {
        "summary": "List capabilities for account",
        "operationId": "listCapabilities",
        "description": "Retrieve all the capabilities an account has requested. <br><br> To use this endpoint, you need to specify the `/accounts/{accountID}/capabilities.read` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of capabilities for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Capability"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      },
      "post": {
        "summary": "Request capabilities",
        "operationId": "addCapabilities",
        "description": "Request capabilities for a specific account. <br><br> To use this endpoint, you must specify the `/accounts/{accountID}/capabilities.write` scope.",
        "tags": [
          "Capabilities"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/AccountID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddCapabilityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The list of capabilities for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Capability"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No account with the specified accountID was found."
          },
          "409": {
            "description": "The request could not be processed due to a state conflict with the target resource.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapabilityRequestError"
                }
              }
            }
          },
          "422": {
            "description": "The request body could not be processed."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/industries": {
      "get": {
        "summary": "List all industries",
        "operationId": "listIndustries",
        "description": "Returns a list of all industry titles and their corresponding MCC/SIC/NAICS codes. Results are ordered by title.\n<br><br> To list industries, you must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Industries"
        ],
        "responses": {
          "200": {
            "description": "A list of industries and their codes",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Industries"
                }
              }
            }
          }
        }
      }
    },
    "/institutions/{rail}/search": {
      "get": {
        "tags": [
          "Institutions"
        ],
        "summary": "Search institutions",
        "description": "Search for institutions by their routing number or name. <br><br> To use this endpoint, you need to specify the `/fed.read` scope.",
        "operationId": "searchInstitutions",
        "parameters": [
          {
            "$ref": "#/components/parameters/Rail"
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the financial institution",
            "example": "Farmers",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "routingNumber",
            "in": "query",
            "description": "Routing number for a financial institution",
            "example": 44112187,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "description": "Optional parameters to filter results",
            "example": "IA",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "example": 499
            },
            "description": "Maximum results returned by a search"
          }
        ],
        "responses": {
          "200": {
            "description": "Financial institutions returned from a search",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialInstitutions"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "500": {
            "description": "Internal error, check error(s) and report the issue."
          }
        }
      }
    },
    "/avatars/{uniqueID}": {
      "get": {
        "summary": "Get avatar",
        "operationId": "getAvatar",
        "description": "Get avatar image for an account using a unique ID.\n<br><br> To get an avatar, you must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Avatars"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/UniqueID"
          }
        ],
        "responses": {
          "200": {
            "description": "The avatar image",
            "content": {
              "image/*": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "No image with the specified uniqueID was found."
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/enrichment/address": {
      "get": {
        "summary": "Get address suggestions",
        "operationId": "getEnrichmentAddress",
        "description": "Fetch enriched address suggestions. Requires a partial address. \n<br><br> You must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Enriched address"
        ],
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Partial or complete address to search.\n",
            "example": "123 Main Street",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "maxResults",
            "in": "query",
            "description": "Maximum number of results to return.\n",
            "example": 10,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "includeCities",
            "in": "query",
            "description": "Limits results to a list of given cities.\n",
            "example": "chicago;honolulu;portland",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeStates",
            "in": "query",
            "description": "Limits results to a list of given states.\n",
            "example": "illinois;hawaii;oregon",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeZipcodes",
            "in": "query",
            "description": "Limits results to a list of given zipcodes.\n",
            "example": "60412;96818;97209",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "excludeStates",
            "in": "query",
            "description": "Exclude list of states from results. No `include` pararmeters may be used with this parameter.\n",
            "example": "AZ;WA;SC",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferCities",
            "in": "query",
            "description": "Display results with the listed cities at the top.\n",
            "example": "denver;aurora;omaha",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferStates",
            "in": "query",
            "description": "Display results with the listed states at the top.\n",
            "example": "CO;MN;WI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferZipcodes",
            "in": "query",
            "description": "Display results with the listed zipcodes at the top.\n",
            "example": "60412;96818;97209",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "preferRatio",
            "in": "query",
            "description": "Specifies the percentage of address suggestions that should be preferred and will appear at the top of the results.\n",
            "example": 45,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "preferGeolocation",
            "in": "query",
            "description": "If omitted or set to `city` it uses the sender's IP address to determine location, then automatically adds the city and state to the preferCities value. This parameter takes precedence over other `include` or `exclude` parameters meaning that if it is not set to `none` you may see addresses from areas you do not wish to see.\n",
            "example": "none",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "selected",
            "in": "query",
            "description": "Useful for narrowing results with `addressLine2` suggestions such as `Apt` (denotes an apartment building with multiple residences).\n",
            "example": "Apt",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "description": "Include results from alternate data sources. Allowed values are -- `all` (non-postal addresses) or `postal` (postal addresses only).\n",
            "example": "all",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address suggestions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnrichmentAddress"
                  }
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/enrichment/profile": {
      "get": {
        "summary": "Get enriched profile",
        "operationId": "getEnrichmentProfile",
        "description": "Fetch enriched profile data. Requires a valid email address. This service is offered in collaboration with Clearbit.\n<br><br> To get enriched profile information, you must specify the `/profile-enrichment.read` scope.\n",
        "tags": [
          "Enriched profile"
        ],
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "Valid email address belonging to the profile of interest\n",
            "example": "employee@business.com",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The enriched profile",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnrichmentProfile"
                }
              }
            }
          },
          "404": {
            "description": "No profile found"
          },
          "422": {
            "description": "The request body could not be processed"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          },
          "503": {
            "description": "The service is unavailable"
          },
          "default": {
            "$ref": "#/components/responses/Empty"
          }
        }
      }
    },
    "/webhooks": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        }
      ],
      "post": {
        "operationId": "CreateWebhook",
        "summary": "Create webhook",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/responses-Empty"
          },
          "422": {
            "description": "Validation error(s)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookErrors"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      },
      "get": {
        "operationId": "ListWebhooks",
        "summary": "List webhooks",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched a list of webhooks.",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/responses-Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/webhooks/{webhookID}": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        },
        {
          "$ref": "#/components/parameters/WebhookID"
        }
      ],
      "get": {
        "operationId": "GetWebhook",
        "summary": "Get webhook",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched a webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/responses-Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      },
      "put": {
        "operationId": "UpdateWebhook",
        "summary": "Update webhook",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWebhook"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated a webhook.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "422": {
            "description": "Validation error(s).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookErrors"
                }
              }
            }
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      },
      "delete": {
        "operationId": "DeleteHook",
        "summary": "Delete webhook",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the webhook."
          },
          "404": {
            "$ref": "#/components/responses/responses-Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/webhooks/{webhookID}/ping": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        },
        {
          "$ref": "#/components/parameters/WebhookID"
        }
      ],
      "post": {
        "operationId": "PingWebhook",
        "summary": "Send ping",
        "description": "Send a ping event to test if the webhook is setup correctly.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully sent the ping event.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/responses-Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/webhooks/{webhookID}/secret": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        },
        {
          "$ref": "#/components/parameters/WebhookID"
        }
      ],
      "get": {
        "operationId": "GetWebhookSecret",
        "summary": "Get webhook secret",
        "description": "Get secret to verify that a HTTP request came from Moov.",
        "tags": [
          "Webhooks"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved webhook secret.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookSecretKey"
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/responses-Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/webhooks/{webhookID}/event-types": {
      "parameters": [
        {
          "$ref": "#/components/parameters/XAccountID"
        },
        {
          "$ref": "#/components/parameters/WebhookID"
        }
      ],
      "get": {
        "operationId": "ListEventTypes",
        "summary": "List event types",
        "description": "Get a list of event types that a webhook can subscribe to. The list will be in alphabetical order based on the identifier.\nThis endpoint should be available to Moov's customers.\n",
        "tags": [
          "Events"
        ],
        "security": [
          {
            "GatewayAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched a list of event types.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventTypeObject"
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/responses-Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/ping": {
      "get": {
        "operationId": "Ping",
        "summary": "Test Authentication",
        "tags": [
          "Ping"
        ],
        "responses": {
          "200": {
            "description": "Successfully able to hit the ping endpoint.",
            "$ref": "#/components/responses/Empty"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/transfers/sum": {
      "post": {
        "summary": "Sum all transfers across intervals",
        "operationId": "analyticsTransferSum",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransferSums"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/transfers/largest": {
      "post": {
        "summary": "Return the largest number of transfers",
        "operationId": "analyticsTransferLargest",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitedTimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SpecificTransfers"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/transfers/smallest": {
      "post": {
        "summary": "Return the smallest number of transfers",
        "operationId": "analyticsTransferSmallest",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LimitedTimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/SpecificTransfers"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/transfers/statuses": {
      "post": {
        "summary": "Count the transfer statuses",
        "operationId": "analyticsTransferStatuses",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/TransferStatusCounts"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    },
    "/analytics/accounts/profiles-created": {
      "post": {
        "summary": "Count the number of profiles created by an individual or business",
        "operationId": "analyticsAccountsCreated",
        "tags": [
          "Analytics"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TimeRange"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/ProfilesCreated"
          },
          "404": {
            "$ref": "#/components/responses/Empty"
          },
          "429": {
            "$ref": "#/components/responses/RateLimited"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error": {
        "description": "Error response for http requests that failed.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "example": "example error message",
            "type": "string"
          }
        }
      },
      "AccountCreated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "AcountUpdated": {
        "$ref": "#/components/schemas/AccountUpdated"
      },
      "AccountDeleted": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "RepresentativeCreated": {
        "type": "object",
        "properties": {
          "representativeID": {
            "type": "string",
            "description": "ID of the representative"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "RepresentativeUpdated": {
        "type": "object",
        "properties": {
          "representativeID": {
            "type": "string",
            "description": "ID of the representative"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "RepresentativeDeleted": {
        "type": "object",
        "properties": {
          "representativeID": {
            "type": "string",
            "description": "ID of the representative"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "CapabilityRequested": {
        "type": "object",
        "properties": {
          "capabilityID": {
            "type": "string",
            "description": "ID of the capability"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account requesting the capability"
          }
        }
      },
      "CapabilityUpdated": {
        "type": "object",
        "properties": {
          "capabilityID": {
            "type": "string",
            "description": "ID of the capability"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account requesting the capability"
          },
          "status": {
            "type": "string",
            "description": "Status of the capability"
          }
        }
      },
      "DisputeCreated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the merchant's Account associated with the disputed transaction"
          },
          "transferID": {
            "type": "string",
            "description": "ID of the disputed transfer"
          },
          "transactionID": {
            "type": "string",
            "description": "ID of the disputed transaction"
          },
          "disputeID": {
            "type": "string",
            "description": "ID of the dispute"
          }
        }
      },
      "BankAccountCreated": {
        "type": "object",
        "properties": {
          "bankAccountID": {
            "type": "string",
            "description": "ID of the bank account"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account where the bank account was created"
          }
        }
      },
      "BankAccountUpdated": {
        "type": "object",
        "properties": {
          "bankAccountID": {
            "type": "string",
            "description": "ID of the bank account"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account where the bank account was updated"
          },
          "status": {
            "type": "string",
            "description": "Status of the bank account"
          }
        }
      },
      "BankAccountDeleted": {
        "type": "object",
        "properties": {
          "bankAccountID": {
            "type": "string",
            "description": "ID of the bank account"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account where the bank account was deleted"
          }
        }
      },
      "TransferCreated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the facilitator account"
          },
          "transferID": {
            "type": "string",
            "description": "ID of the transfer"
          },
          "status": {
            "type": "string",
            "description": "Status of the transfer"
          }
        }
      },
      "TransferUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the facilitator account"
          },
          "transferID": {
            "type": "string",
            "description": "ID of the transfer"
          },
          "status": {
            "type": "string",
            "description": "Status of the transfer"
          },
          "source": {
            "$ref": "#/components/schemas/TransferPaymentMethod"
          },
          "destination": {
            "$ref": "#/components/schemas/TransferPaymentMethod"
          }
        }
      },
      "PaymentMethodEnabled": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "type": "string",
            "description": "ID of the payment method"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          },
          "sourceID": {
            "type": "string",
            "description": "ID of the bank account, card, or wallet"
          }
        }
      },
      "PaymentMethodDisabled": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "type": "string",
            "description": "ID of the payment method"
          },
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          },
          "sourceID": {
            "type": "string",
            "description": "ID of the bank account, card, or wallet"
          }
        }
      },
      "BalanceUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the Account associated with the wallet"
          },
          "walletID": {
            "type": "string",
            "description": "ID of the Wallet"
          }
        }
      },
      "WalletTransactionUpdated": {
        "properties": {
          "accountID": {
            "description": "ID of the account associated with the wallet",
            "type": "string"
          },
          "walletID": {
            "description": "ID of the Wallet",
            "type": "string"
          },
          "transactionID": {
            "description": "ID of the wallet transaction",
            "type": "string"
          },
          "status": {
            "type": "string",
            "description": "Status of the wallet transaction"
          },
          "availableBalance": {
            "description": "Available balance of the wallet.",
            "$ref": "#/components/schemas/AvailableBalance"
          }
        },
        "type": "object"
      },
      "RefundCreated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the merchant's Account associated with the refund transfer"
          },
          "transferID": {
            "type": "string",
            "description": "ID of the original transfer"
          },
          "refundID": {
            "type": "string",
            "description": "ID of the refund transfer"
          }
        }
      },
      "RefundUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the merchant's Account associated with the refund transfer"
          },
          "transferID": {
            "type": "string",
            "description": "ID of the original transfer"
          },
          "refundID": {
            "type": "string",
            "description": "ID of the refund transfer"
          },
          "status": {
            "type": "string",
            "description": "Status of the refund transfer"
          }
        }
      },
      "CardAutoUpdated": {
        "type": "object",
        "required": [
          "accountID",
          "cardID",
          "updateType"
        ],
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the merchant's Account associated with the updated Card"
          },
          "cardID": {
            "type": "string",
            "description": "ID of the Card that was updated"
          },
          "updateType": {
            "$ref": "#/components/schemas/CardUpdateType"
          }
        }
      },
      "Email": {
        "description": "Email address.",
        "type": "string",
        "format": "email",
        "example": "amanda@classbooker.dev",
        "pattern": "^([a-zA-Z0-9_\\-\\.]+\\+?[a-zA-Z0-9\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$",
        "maxLength": 255
      },
      "Signup": {
        "description": "Self signup request",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "Password": {
        "description": "Describes a password for a user",
        "type": "string",
        "pattern": "^.*$",
        "example": "horse Battery st@ple 123",
        "minLength": 8,
        "maxLength": 128
      },
      "Signin": {
        "description": "Signin with password credentials",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "UUID": {
        "description": "UUID v4",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "example": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "DateTime": {
        "type": "string",
        "format": "date-time",
        "maxLength": 24
      },
      "GivenName": {
        "description": "Name this person was given. This is usually the the same as first name.",
        "type": "string",
        "pattern": "^\\w+$",
        "example": "Amanda",
        "maxLength": 64
      },
      "FamilyName": {
        "description": "Family name of this person. This is usually the the same as last name.",
        "type": "string",
        "pattern": "^\\w+$",
        "example": "Yang",
        "maxLength": 64
      },
      "OptionalURL": {
        "type": "string",
        "format": "url",
        "example": "https://placekitten.com/408/287",
        "nullable": true,
        "maxLength": 255
      },
      "User": {
        "description": "User model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userID": {
            "$ref": "#/components/schemas/UUID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "lastLoginOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "photoURL": {
            "$ref": "#/components/schemas/OptionalURL"
          }
        }
      },
      "Base64": {
        "description": "Base64 string of data.",
        "type": "string",
        "format": "byte",
        "example": "U3dhZ2dlciByb2Nrcw==",
        "maxLength": 1024
      },
      "DeviceFingerprint": {
        "description": "Device hash generated by a frontend library.",
        "type": "string",
        "pattern": "^\\w+$",
        "example": "fBkwz3q43jlTHB8wFtiDgxT0WMpjUmDvMsTbQbz1",
        "maxLength": 64
      },
      "Setup": {
        "description": "Setup password authentication",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Base64"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/DeviceFingerprint"
          }
        }
      },
      "ChangePassword": {
        "description": "User model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          },
          "newPassword": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "Recover": {
        "description": "Email to send recover instructions to",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      },
      "ResetPassword": {
        "description": "Email to send recover instructions to",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "token": {
            "$ref": "#/components/schemas/Base64"
          },
          "password": {
            "$ref": "#/components/schemas/Password"
          }
        }
      },
      "URL": {
        "type": "string",
        "format": "url",
        "example": "https://placekitten.com/408/287",
        "maxLength": 255
      },
      "DeviceInfo": {
        "description": "Current device information",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fingerprint": {
            "$ref": "#/components/schemas/DeviceFingerprint"
          }
        }
      },
      "DeviceVerification": {
        "description": "Return to state if this device is verified, and if not how to verify",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "verified": {
            "type": "boolean"
          }
        },
        "required": [
          "verified"
        ]
      },
      "TOTPCode": {
        "description": "6 digit TOTP code",
        "type": "string",
        "pattern": "^[1-9][0-9]{5}$",
        "example": "123456",
        "maxLength": 6
      },
      "VerifyViaEmail": {
        "description": "Current device information",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fingerprint": {
            "$ref": "#/components/schemas/DeviceFingerprint"
          },
          "code": {
            "$ref": "#/components/schemas/TOTPCode"
          }
        }
      },
      "SendViaEmail": {
        "description": "Send the code via email attached to the user",
        "type": "object",
        "additionalProperties": false,
        "properties": {}
      },
      "Scope": {
        "description": "A space-delimited list of [scopes](https://docs.moov.io/guides/developer-tools/api-keys/scopes/) that are allowed",
        "type": "string",
        "example": "/accounts.write"
      },
      "AccessToken": {
        "description": "String passed to the authorization server to gain access to the system",
        "example": "i1qxz68gu50zp4i8ceyxqogmq7y0yienm52351c6...",
        "type": "string",
        "format": "byte",
        "maxLength": 4096
      },
      "ClientCredentialsGrantToAccessTokenRequest": {
        "description": "Allows the use of `Client Credentials Grant` per the RFC 6749 of (OAuth 2.0 Authorization Framework)[https://tools.ietf.org/html/rfc6749#section-4.4]. Following this specification will allow any tooling to be able to use this API to get an `access_token`.",
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "client_credentials",
              "refresh_token"
            ]
          },
          "client_id": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "5clTR_MdVrrkgxw2",
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "client_secret": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-",
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/AccessToken"
          }
        },
        "required": [
          "grant_type"
        ]
      },
      "ExpiresIn": {
        "description": "Number of seconds the token is valid for.",
        "type": "integer",
        "format": "int32",
        "example": 900
      },
      "ClientCredentialsGrantToAccessTokenResponse": {
        "description": "Device model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "access_token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "refresh_token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "token_type": {
            "description": "Type of token returned. Opaque is not parse-able while JWT follows JWT spec.",
            "type": "string",
            "enum": [
              "opaque",
              "jwt"
            ]
          },
          "expires_in": {
            "$ref": "#/components/schemas/ExpiresIn"
          },
          "scope": {
            "$ref": "#/components/schemas/Scope"
          }
        }
      },
      "AccessTokenResponse": {
        "description": "Possible responses that can be made to the /token endpoints. The type of response returned here will mirror the type of the request",
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenResponse"
          }
        ]
      },
      "ClientCredentialsGrantToAccessTokenErrorResponse": {
        "description": "Error happened when trying to obtain an access token",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "type": "string",
            "enum": [
              "invalid_request",
              "invalid_client",
              "invalid_grant",
              "unauthorized_client",
              "unsupported_grant_type",
              "invalid_scope"
            ]
          }
        }
      },
      "AccessTokenErrorResponse": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/ClientCredentialsGrantToAccessTokenErrorResponse"
          }
        ]
      },
      "RevokeTokenRequest": {
        "description": "Allows clients to notify the authorization server that a previously obtained refresh or access token is no longer needed",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "$ref": "#/components/schemas/AccessToken"
          },
          "token_type_hint": {
            "description": "A hint about the type of the token submitted for revocation",
            "type": "string",
            "enum": [
              "access_token",
              "refresh_token"
            ]
          },
          "client_id": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "5clTR_MdVrrkgxw2",
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "client_secret": {
            "description": "If not specified in `Authorization: Basic` it can be specified here",
            "example": "dNC-hg7sVm22jc3g_Eogtyu0_1Mqh_4-",
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "required": [
          "token"
        ]
      },
      "Session": {
        "description": "Session model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userID": {
            "$ref": "#/components/schemas/UUID"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "expiresOn": {
            "type": "integer",
            "format": "int64",
            "description": "Number of seconds from epoch that this will expire on"
          },
          "globalExpiresOn": {
            "type": "integer",
            "format": "int64",
            "description": "Number of seconds from epoch that this session will globally expire on"
          },
          "photoURL": {
            "$ref": "#/components/schemas/OptionalURL"
          }
        }
      },
      "AccountID": {
        "description": "ID of account.",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "OptionalDateTime": {
        "type": "string",
        "format": "date-time",
        "maxLength": 24,
        "nullable": true
      },
      "OptionalUUID": {
        "description": "UUID v4",
        "type": "string",
        "format": "uuid",
        "example": "f5f47bfa-fa5a-41f4-99eb-8671c1875b3f",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$",
        "nullable": true
      },
      "Invite": {
        "description": "Describes an invite that was sent to a user to join.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "inviteID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "invitedBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "invitedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "redeemedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "expiresOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "disabledBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "declinedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "declinedBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "roles": {
            "description": "List of roleID's to add the user to once invite has been accepted",
            "type": "array",
            "maxItems": 300,
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        }
      },
      "SendInvite": {
        "description": "Describes an invite that was sent to a user to join.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "roles": {
            "description": "List of roleID's to add the user to once invite has been accepted",
            "type": "array",
            "maxItems": 300,
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          }
        }
      },
      "ResendInvite": {
        "description": "Describes an invite to be resent",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "inviteID": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "AccountType": {
        "description": "The type of entity represented by this account.",
        "example": "business",
        "type": "string",
        "enum": [
          "individual",
          "business"
        ]
      },
      "ForeignID": {
        "description": "Optional alias from a foreign/external system which can be used to reference this resource.",
        "type": "string",
        "example": "4528aba-b9a1-11eb-8529-0242ac13003",
        "maxLength": 64
      },
      "AccountVerificationStatus": {
        "description": "The status of an identity verification for a profile.",
        "type": "string",
        "enum": [
          "unverified",
          "pending",
          "resubmit",
          "review",
          "verified",
          "failed"
        ]
      },
      "Mode": {
        "description": "The mode this account is allowed to be used within.",
        "example": "production",
        "type": "string",
        "enum": [
          "sandbox",
          "production"
        ]
      },
      "ValidatedGivenName": {
        "description": "Name this person was given. This is usually the the same as first name.",
        "type": "string",
        "pattern": "^[À-ÖØ-öø-ÿ\"'(),.\\-0-9A-Za-z\\[\\]{}~ &]*$",
        "example": "Amanda",
        "maxLength": 64
      },
      "ValidatedFamilyName": {
        "description": "Family name of this person. This is usually the the same as last name.",
        "type": "string",
        "pattern": "^[À-ÖØ-öø-ÿ\"'(),.\\-0-9A-Za-z\\[\\]{}~ &]*$",
        "example": "Yang",
        "maxLength": 64
      },
      "ValidatedSuffix": {
        "description": "Suffix of a given name.",
        "type": "string",
        "pattern": "^[À-ÖØ-öø-ÿ\"'(),.\\-0-9A-Za-z\\[\\]{}~ &]*$",
        "example": "Jr",
        "maxLength": 20
      },
      "Name": {
        "description": "An individual's name.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "firstName": {
            "$ref": "#/components/schemas/ValidatedGivenName"
          },
          "middleName": {
            "$ref": "#/components/schemas/ValidatedGivenName"
          },
          "lastName": {
            "$ref": "#/components/schemas/ValidatedFamilyName"
          },
          "suffix": {
            "$ref": "#/components/schemas/ValidatedSuffix"
          }
        }
      },
      "Phone": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "string",
            "format": "phone",
            "example": "8185551212",
            "maxLength": 10
          },
          "countryCode": {
            "type": "string",
            "example": "1",
            "maxLength": 1
          }
        }
      },
      "Address": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "addressLine1": {
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 60
          },
          "addressLine2": {
            "type": "string",
            "example": "Apt 302",
            "maxLength": 32
          },
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "stateOrProvince": {
            "type": "string",
            "example": "CO",
            "maxLength": 2
          },
          "postalCode": {
            "type": "string",
            "example": "80301",
            "maxLength": 5
          },
          "country": {
            "type": "string",
            "example": "US",
            "maxLength": 2
          }
        }
      },
      "Individual": {
        "description": "Describes an individual.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDateProvided": {
            "description": "Indicates whether this individual's birth date has been provided.",
            "type": "boolean",
            "default": false
          },
          "governmentIDProvided": {
            "description": "Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this individual.",
            "type": "boolean",
            "default": false
          }
        },
        "required": [
          "name",
          "birthDateProvided",
          "governmentIDProvided"
        ]
      },
      "BusinessType": {
        "description": "The type of entity represented by this business.",
        "type": "string",
        "example": "llc",
        "enum": [
          "soleProprietorship",
          "unincorporatedAssociation",
          "trust",
          "publicCorporation",
          "privateCorporation",
          "llc",
          "partnership",
          "unincorporatedNonProfit",
          "incorporatedNonProfit"
        ]
      },
      "Responsibilities": {
        "description": "Describes the job responsibilities of an individual.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isController": {
            "description": "Indicates whether this individual has significant management responsibilities within the business.",
            "type": "boolean",
            "example": false,
            "default": false
          },
          "isOwner": {
            "description": "If `true`, this field indicates that the individual has a business ownership stake of at least 25% in the business. If the representative does not own at least 25% of the business, this field should be `false`.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "ownershipPercentage": {
            "description": "The percentage of ownership this individual has in the business (required if `isOwner` is `true`).",
            "type": "integer",
            "example": 38
          },
          "jobTitle": {
            "type": "string",
            "example": "CEO",
            "maxLength": 64
          }
        },
        "required": [
          "isController",
          "isOwner",
          "ownershipPercentage",
          "jobTitle"
        ]
      },
      "Representative": {
        "description": "Describes a business representative.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "representativeID": {
            "$ref": "#/components/schemas/UUID"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDateProvided": {
            "description": "Indicates whether this representative's birth date has been provided.",
            "type": "boolean",
            "default": false
          },
          "governmentIDProvided": {
            "description": "Indicates whether a government ID (SSN, ITIN, etc.) has been provided for this representative.",
            "type": "boolean",
            "default": false
          },
          "responsibilities": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Responsibilities"
              }
            ]
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ]
          }
        },
        "required": [
          "name",
          "birthDateProvided",
          "governmentIDProvided",
          "createdOn",
          "updatedOn"
        ]
      },
      "IndustryCodes": {
        "description": "Describes industry specific identifiers.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "naics": {
            "type": "string",
            "example": "713940",
            "minLength": 2,
            "maxLength": 6
          },
          "sic": {
            "type": "string",
            "example": "7991",
            "minLength": 4,
            "maxLength": 4
          },
          "mcc": {
            "type": "string",
            "example": "7997",
            "minLength": 4,
            "maxLength": 4
          }
        }
      },
      "Business": {
        "description": "Describes a business.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "type": "string",
            "maxLength": 64
          },
          "doingBusinessAs": {
            "type": "string",
            "maxLength": 64
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "website": {
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "type": "string",
            "example": "Local fitness gym paying out instructors",
            "minLength": 10,
            "maxLength": 100
          },
          "taxIDProvided": {
            "description": "Indicates whether a tax ID has been provided for this business.",
            "type": "boolean",
            "default": false
          },
          "representatives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Representative"
            },
            "example": []
          },
          "ownersProvided": {
            "type": "boolean"
          },
          "industryCodes": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryCodes"
              }
            ]
          }
        },
        "required": [
          "legalBusinessName",
          "businessType",
          "taxIDProvided",
          "ownersProvided"
        ]
      },
      "Profile": {
        "description": "Describes a Moov account profile.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Individual"
              }
            ]
          },
          "business": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Business"
              }
            ]
          }
        }
      },
      "Metadata": {
        "description": "Free-form key-value pair list. Useful for storing information that is not captured elsewhere.",
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "IpAddress": {
        "type": "string",
        "format": "ipv4",
        "example": "127.0.0.1",
        "maxLength": 15
      },
      "TermsOfService": {
        "description": "Describes the acceptance of the Terms of Service.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "acceptedDate": {
            "$ref": "#/components/schemas/DateTime"
          },
          "acceptedIP": {
            "$ref": "#/components/schemas/IpAddress"
          }
        },
        "required": [
          "acceptedDate",
          "acceptedIP"
        ]
      },
      "VerificationStatus": {
        "description": "This field is deprecated but available for use until February 2023.",
        "type": "string",
        "enum": [
          "unverified",
          "pending",
          "verified",
          "errored"
        ],
        "deprecated": true
      },
      "VerificationStatusDetails": {
        "description": "This field is deprecated but available for use until February 2023.",
        "type": "string",
        "enum": [
          "failedAutoVerify",
          "docDobMismatch",
          "docNameMismatch",
          "docAddressMismatch",
          "docNumberMismatch",
          "docIncomplete",
          "docFailedRisk",
          "potentialAccountSanctionsMatch",
          "potentialRepresentativeSanctionsMatch",
          "failedOther"
        ],
        "deprecated": true
      },
      "Document": {
        "description": "Describes an uploaded file.",
        "type": "object",
        "properties": {
          "documentID": {
            "type": "string",
            "description": "A unique identifier for this document.",
            "example": "e210a9d6"
          },
          "type": {
            "type": "string",
            "enum": [
              "DriversLicense",
              "Passport",
              "UtilityBill",
              "BankStatement"
            ]
          },
          "contentType": {
            "type": "string",
            "example": "application/pdf"
          },
          "parseErrors": {
            "description": "Optional array of errors encountered dring automated parsing.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uploadedAt": {
            "$ref": "#/components/schemas/DateTime"
          }
        },
        "required": [
          "documentID",
          "type",
          "contentType",
          "uploadedAt"
        ]
      },
      "Verification": {
        "description": "Describes identity verification status and relevant identity verification documents.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "verificationStatus": {
            "$ref": "#/components/schemas/AccountVerificationStatus"
          },
          "status": {
            "$ref": "#/components/schemas/VerificationStatus"
          },
          "details": {
            "$ref": "#/components/schemas/VerificationStatusDetails"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Document"
            }
          }
        },
        "required": [
          "status"
        ]
      },
      "CustomerSupport": {
        "description": "User-provided information that can be displayed on credit card transactions for customers to use when contacting a customer support team. This data is only allowed on a business account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "website": {
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          }
        }
      },
      "StatementDescriptor": {
        "description": "The description that shows up on credit card transactions. This will default to the accounts display name on account creation.",
        "type": "string",
        "example": "Whole Body Fitness",
        "pattern": "^([\\w0-9.!*-+_\\- ]+)$",
        "minLength": 4,
        "maxLength": 22
      },
      "CardPaymentSettings": {
        "description": "User provided settings to manage card payments. This data is only allowed on a business account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "statementDescriptor": {
            "$ref": "#/components/schemas/StatementDescriptor"
          }
        }
      },
      "CompanyName": {
        "description": "The description that shows up on ACH transactions. This will default to the account's display name on account creation.",
        "type": "string",
        "example": "Whole Body Fitness",
        "pattern": "^[a-zA-Z0-9\\- ]+$",
        "minLength": 1,
        "maxLength": 16
      },
      "ACHPaymentSettings": {
        "description": "User provided settings to manage ACH payments.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "companyName": {
            "$ref": "#/components/schemas/CompanyName"
          }
        }
      },
      "AccountSettings": {
        "description": "User provided settings to manage an account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cardPayment": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CardPaymentSettings"
              }
            ]
          },
          "achPayment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ACHPaymentSettings"
              }
            ],
            "nullable": true
          }
        }
      },
      "Account": {
        "description": "Describes a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "accountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "displayName": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          },
          "profile": {
            "$ref": "#/components/schemas/Profile"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "termsOfService": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsOfService"
              }
            ]
          },
          "verification": {
            "$ref": "#/components/schemas/Verification"
          },
          "foreignID": {
            "$ref": "#/components/schemas/ForeignID"
          },
          "customerSupport": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerSupport"
              }
            ]
          },
          "settings": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSettings"
              }
            ]
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disconnectedOn": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTime"
              }
            ]
          }
        },
        "required": [
          "accountID",
          "accountType",
          "profile",
          "createdOn",
          "updatedOn"
        ]
      },
      "BirthDate": {
        "description": "An individual's birthdate.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "day": {
            "type": "integer",
            "example": 9
          },
          "month": {
            "type": "integer",
            "example": 11
          },
          "year": {
            "type": "integer",
            "example": 1989
          }
        },
        "required": [
          "day",
          "month",
          "year"
        ]
      },
      "SSN": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "full": {
            "type": "string",
            "example": "123-45-6789",
            "maxLength": 64
          },
          "lastFour": {
            "type": "string",
            "example": "6789",
            "maxLength": 4
          }
        }
      },
      "ITIN": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "full": {
            "type": "string",
            "example": "123-45-6789",
            "maxLength": 64
          },
          "lastFour": {
            "type": "string",
            "example": "6789",
            "maxLength": 4
          }
        }
      },
      "GovernmentID": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ssn": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/SSN"
              }
            ]
          },
          "itin": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ITIN"
              }
            ]
          }
        }
      },
      "CreateIndividual": {
        "description": "Describes the fields available when creating an individual.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          }
        },
        "required": [
          "name",
          "firstName",
          "lastName"
        ]
      },
      "EIN": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "number": {
            "type": "string",
            "example": "123-45-6789",
            "maxLength": 64
          }
        }
      },
      "TaxID": {
        "description": "An EIN (employer identification number) for the business. For sole proprietors, an SSN can be used as the EIN.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "ein": {
            "$ref": "#/components/schemas/EIN"
          }
        }
      },
      "CreateBusiness": {
        "description": "Describes the fields available when creating a business.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "example": "Whole Body Fitness LLC",
            "type": "string",
            "maxLength": 64,
            "pattern": "^[À-ÖØ-öø-ÿ\"'(),.\\-0-9A-Za-z\\[\\]{}~ &]*$"
          },
          "doingBusinessAs": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64,
            "pattern": "^[À-ÖØ-öø-ÿ\"'(),.\\-0-9A-Za-z\\[\\]{}~ &]*$"
          },
          "businessType": {
            "$ref": "#/components/schemas/BusinessType"
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "website": {
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "example": "Local fitness center paying out instructors",
            "type": "string",
            "maxLength": 100,
            "minLength": 10
          },
          "taxID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxID"
              }
            ]
          },
          "industryCodes": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryCodes"
              }
            ]
          }
        },
        "required": [
          "legalBusinessName",
          "businessType"
        ]
      },
      "CreateProfile": {
        "description": "Describes the fields available when creating a profile.\nIf `accountType` is set to `individual`, the `individual` object should be completed. All others should populate `business`.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateIndividual"
              }
            ]
          },
          "business": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CreateBusiness"
              }
            ]
          }
        }
      },
      "TermsOfServiceToken": {
        "description": "An encrypted value used to record acceptance of Moov's Terms of Service.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "token": {
            "type": "string",
            "example": "kgT1uxoMAk7QKuyJcmQE8nqW_HjpyuXBabiXPi6T83fUQoxsyWYPcYzuHQTqrt7YRp4gCwyDQvb6U5REM9Pgl2EloCe35t-eiMAbUWGo3Kerxme6aqNcKrP_6-v0MTXViOEJ96IBxPFTvMV7EROI2dq3u4e-x4BbGSCedAX-ViAQND6hcreCDXwrO6sHuzh5Xi2IzSqZHxaovnWEboaxuZKRJkA3dsFID6fzitMpm2qrOh4"
          }
        }
      },
      "UserAgent": {
        "description": "The user-agent of the user making the request.",
        "type": "string",
        "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.71 Safari/537.36",
        "maxLength": 255
      },
      "TermsOfServiceManual": {
        "description": "Describes the acceptance of the Terms of Service. All data is required, and must be from the user.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "acceptedDate": {
            "$ref": "#/components/schemas/DateTime"
          },
          "acceptedIP": {
            "$ref": "#/components/schemas/IpAddress"
          },
          "acceptedUserAgent": {
            "$ref": "#/components/schemas/UserAgent"
          },
          "acceptedDomain": {
            "$ref": "#/components/schemas/URL"
          }
        },
        "required": [
          "acceptedDate",
          "acceptedIP",
          "acceptedUserAgent",
          "acceptedDomain"
        ]
      },
      "TermsOfServicePayload": {
        "description": "Describes the acceptance of the Terms of Service.",
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/TermsOfServiceToken"
          },
          {
            "$ref": "#/components/schemas/TermsOfServiceManual"
          }
        ]
      },
      "CapabilityID": {
        "description": "Identifier for the capability.",
        "type": "string",
        "enum": [
          "transfers",
          "send-funds",
          "collect-funds",
          "wallet",
          "card-issuing"
        ]
      },
      "CreateAccountRequest": {
        "description": "Describes the fields available when creating a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/Mode"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "profile": {
            "$ref": "#/components/schemas/CreateProfile"
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "termsOfService": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsOfServicePayload"
              }
            ]
          },
          "foreignID": {
            "$ref": "#/components/schemas/ForeignID"
          },
          "customerSupport": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerSupport"
              }
            ]
          },
          "settings": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSettings"
              }
            ]
          },
          "capabilities": {
            "description": "The list of capabilities to request when the account is created.",
            "nullable": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityID"
            }
          }
        },
        "required": [
          "accountType",
          "profile"
        ]
      },
      "PatchIndividual": {
        "description": "Describes the fields available when patching an individual.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Email"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          }
        }
      },
      "PatchBusiness": {
        "description": "Describes the fields available when patching a business.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "nullable": true,
            "example": "Whole Body Fitness LLC",
            "type": "string",
            "maxLength": 64,
            "pattern": "^[À-ÖØ-öø-ÿ\"'(),.\\-0-9A-Za-z\\[\\]{}~ &]*$"
          },
          "doingBusinessAs": {
            "nullable": true,
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64,
            "pattern": "^[À-ÖØ-öø-ÿ\"'(),.\\-0-9A-Za-z\\[\\]{}~ &]*$"
          },
          "businessType": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BusinessType"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Email"
              }
            ]
          },
          "website": {
            "nullable": true,
            "example": "www.wholebodyfitnessgym.com",
            "type": "string",
            "maxLength": 100
          },
          "description": {
            "nullable": true,
            "example": "Local fitness center paying out instructors",
            "type": "string",
            "maxLength": 100,
            "minLength": 10
          },
          "taxID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TaxID"
              }
            ]
          },
          "ownersProvided": {
            "nullable": true,
            "allOf": [
              {
                "type": "boolean"
              }
            ]
          },
          "industryCodes": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryCodes"
              }
            ]
          }
        }
      },
      "PatchProfile": {
        "description": "Describes the fields available when patching a profile.\nEach object can be patched independent of patching the other fields.\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "individual": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchIndividual"
              }
            ]
          },
          "business": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchBusiness"
              }
            ]
          }
        }
      },
      "PatchAccountRequest": {
        "description": "Describes the fields available when patching a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "profile": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/PatchProfile"
              }
            ]
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "termsOfService": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TermsOfServicePayload"
              }
            ]
          },
          "foreignID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ForeignID"
              }
            ]
          },
          "customerSupport": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomerSupport"
              }
            ]
          },
          "settings": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/AccountSettings"
              }
            ]
          }
        }
      },
      "Countries": {
        "description": "The Countries of operation for an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "countries": {
            "type": "array",
            "items": {
              "type": "string",
              "maxLength": 64,
              "example": "United States"
            }
          }
        },
        "required": [
          "countries"
        ]
      },
      "CreateRepresentative": {
        "description": "Describes the fields available when creating a representative.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "required": [
              "firstName",
              "lastName"
            ],
            "allOf": [
              {
                "$ref": "#/components/schemas/Name"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Phone"
              }
            ]
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "address": {
            "description": "Residential address for an individual. Business addresses not accepted.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Address"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          },
          "responsibilities": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Responsibilities"
              }
            ]
          }
        }
      },
      "OptionalName": {
        "description": "An individual's name.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "firstName": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidatedGivenName"
              }
            ]
          },
          "middleName": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidatedGivenName"
              }
            ]
          },
          "lastName": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidatedFamilyName"
              }
            ]
          },
          "suffix": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ValidatedSuffix"
              }
            ]
          }
        }
      },
      "OptionalPhone": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "number": {
            "nullable": true,
            "type": "string",
            "format": "phone",
            "example": "8185551212",
            "maxLength": 10
          },
          "countryCode": {
            "nullable": true,
            "type": "string",
            "example": "1",
            "maxLength": 1
          }
        }
      },
      "OptionalAddress": {
        "description": "An individual's residential address. Business addresses not accepted.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "addressLine1": {
            "nullable": true,
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 32
          },
          "addressLine2": {
            "nullable": true,
            "type": "string",
            "example": "Apt 302",
            "maxLength": 32
          },
          "city": {
            "nullable": true,
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "stateOrProvince": {
            "nullable": true,
            "type": "string",
            "example": "CO",
            "maxLength": 2
          },
          "postalCode": {
            "nullable": true,
            "type": "string",
            "example": "80301",
            "maxLength": 5
          },
          "country": {
            "nullable": true,
            "type": "string",
            "example": "US",
            "maxLength": 2
          }
        }
      },
      "OptionalResponsibilities": {
        "description": "Describes the job responsibilities of an individual.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "isController": {
            "nullable": true,
            "description": "Indicates whether this individual has significant management responsibilities within the business.",
            "type": "boolean",
            "example": false,
            "default": false
          },
          "isOwner": {
            "nullable": true,
            "description": "If `true`, this field indicates the individual has a business ownership stake of at least 25% in the business. If the representative does not own at least 25% of the business, this field should be `false`.",
            "type": "boolean",
            "example": true,
            "default": false
          },
          "ownershipPercentage": {
            "nullable": true,
            "description": "The percentage of ownership this individual has in the business (required if `isOwner` is `true`).",
            "type": "integer",
            "example": 38
          },
          "jobTitle": {
            "nullable": true,
            "type": "string",
            "example": "CEO",
            "maxLength": 64
          }
        }
      },
      "PatchRepresentativeRequest": {
        "description": "Describes the fields available when patching a representative.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalName"
              }
            ]
          },
          "phone": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalPhone"
              }
            ]
          },
          "email": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Email"
              }
            ]
          },
          "address": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalAddress"
              }
            ]
          },
          "birthDate": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BirthDate"
              }
            ]
          },
          "governmentID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GovernmentID"
              }
            ]
          },
          "responsibilities": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/OptionalResponsibilities"
              }
            ]
          }
        }
      },
      "UpdateUser": {
        "description": "User model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          }
        }
      },
      "schemas-Name": {
        "description": "Descriptive name allowing spaces.",
        "type": "string",
        "pattern": "^([\\w ]+)$",
        "example": "Amanda Yang",
        "maxLength": 64
      },
      "UserAccount": {
        "description": "Information about an account the user has access to.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "displayName": {
            "$ref": "#/components/schemas/schemas-Name"
          }
        }
      },
      "UserInvite": {
        "description": "Information about an invitation sent to the user",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "inviteID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "displayName": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "expiresOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Resource": {
        "description": "Describes a permission thats allow",
        "type": "string",
        "enum": [
          "/account",
          "/profile",
          "/representatives",
          "/bank-accounts",
          "/applications",
          "/tos",
          "/transfers",
          "/wallets",
          "/connections",
          "/documents",
          "/invites"
        ]
      },
      "Action": {
        "description": "Describes the action that can be taken on a resource",
        "type": "string",
        "enum": [
          "read",
          "write"
        ]
      },
      "RolePolicy": {
        "description": "Describes a permission thats allowed",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/Resource"
          },
          "action": {
            "$ref": "#/components/schemas/Action"
          }
        },
        "required": [
          "resource",
          "action"
        ]
      },
      "Role": {
        "description": "Describes an role.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "roleID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "lastUpdatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "lastUpdatedBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "deletedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "deletedBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "subjects": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "nullable": false
          },
          "policies": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/RolePolicy"
            },
            "nullable": false
          }
        },
        "required": [
          "roleID",
          "accountID",
          "createdOn",
          "createdBy",
          "lastUpdatedOn",
          "lastUpdatedBy",
          "name",
          "subjects",
          "policies"
        ]
      },
      "CreateRole": {
        "description": "Arguments to create a new role.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "subjects": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/UUID"
            },
            "nullable": false
          },
          "policies": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/RolePolicy"
            },
            "nullable": false
          }
        },
        "required": [
          "name",
          "subjects",
          "policies"
        ]
      },
      "UpdateRole": {
        "description": "Arguments to update an existing role.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "subjects": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/UUID"
            }
          },
          "policies": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/RolePolicy"
            }
          }
        },
        "required": [
          "name",
          "subjects",
          "policies"
        ]
      },
      "UserID": {
        "description": "ID of a user.",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "MemberRole": {
        "description": "The roles associated between a user and an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "roleId": {
            "$ref": "#/components/schemas/UUID"
          },
          "roleName": {
            "$ref": "#/components/schemas/schemas-Name"
          }
        }
      },
      "Member": {
        "description": "A user connected to an account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connectedTo": {
            "$ref": "#/components/schemas/AccountID"
          },
          "userID": {
            "$ref": "#/components/schemas/UserID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "givenName": {
            "$ref": "#/components/schemas/GivenName"
          },
          "familyName": {
            "$ref": "#/components/schemas/FamilyName"
          },
          "photoURL": {
            "$ref": "#/components/schemas/OptionalURL"
          },
          "roles": {
            "type": "array",
            "maxItems": 500,
            "items": {
              "$ref": "#/components/schemas/MemberRole"
            }
          }
        }
      },
      "Device": {
        "description": "Device model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "deviceID": {
            "$ref": "#/components/schemas/UUID"
          },
          "userID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "lastSeenOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "disabledBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "description": {
            "description": "Descriptive name of the device",
            "type": "string",
            "pattern": "^([\\w ]+)$",
            "example": "Chrome on Windows 10",
            "maxLength": 128,
            "readOnly": true
          }
        }
      },
      "ApplicationAccountMode": {
        "description": "The mode of the application's associated account:\n  * `0`: unspecified\n  * `1`: sandbox\n  * `2`: production\n",
        "type": "integer",
        "enum": [
          0,
          1,
          2
        ]
      },
      "ApplicationScope": {
        "description": "A scope, a permission that the application requests on another account.",
        "type": "string",
        "enum": [
          "accounts.read",
          "accounts.write",
          "profile.read",
          "profile.write",
          "profile-enrichment.read",
          "connections.read",
          "connections.write",
          "documents.read",
          "documents.write",
          "bank-accounts.read",
          "bank-accounts.write",
          "payment-methods.read",
          "transfers.read",
          "transfers.write",
          "capabilities.read",
          "capabilities.write",
          "representatives.read",
          "representatives.write",
          "ping.read",
          "fed.read",
          "wallets.read",
          "cards.read",
          "cards.write",
          "analytics.read",
          "files.read",
          "files.write"
        ]
      },
      "AllowedApplicationScopes": {
        "description": "List of allowed scopes that can be requested on another account per their agreement with Moov.",
        "type": "array",
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/ApplicationScope"
        }
      },
      "Description": {
        "description": "A description for the item.",
        "type": "string",
        "pattern": "^([\\w ]+)$",
        "example": "Here lies a description of the item",
        "maxLength": 1024
      },
      "Application": {
        "description": "Application model",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "applicationID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "accountMode": {
            "$ref": "#/components/schemas/ApplicationAccountMode"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UUID"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "disabledBy": {
            "$ref": "#/components/schemas/OptionalUUID"
          },
          "allowedScopes": {
            "$ref": "#/components/schemas/AllowedApplicationScopes"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        }
      },
      "CreateApplication": {
        "description": "Fields required to create an application",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "allowedScopes": {
            "$ref": "#/components/schemas/AllowedApplicationScopes"
          }
        }
      },
      "ApplicationID": {
        "description": "ID of a specific Application",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "UpdateApplication": {
        "description": "Fields required to create an application",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          }
        }
      },
      "ApplicationKeyID": {
        "description": "ID of a specific Application Key",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "Origins": {
        "description": "List of domains that are allowed to use this application",
        "type": "array",
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/URL"
        }
      },
      "ClientID": {
        "description": "A randomly generated string of values that denotes the client_id for OAuth authorization",
        "type": "string",
        "format": "byte"
      },
      "ApplicationKey": {
        "description": "A key to use the application to access connections",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "appKeyID": {
            "$ref": "#/components/schemas/ApplicationKeyID"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "clientID": {
            "$ref": "#/components/schemas/ClientID"
          },
          "lastUsed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "CreateApplicationKey": {
        "description": "A key to use the application to access connections",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          }
        }
      },
      "ClientSecret": {
        "description": "A randomly generated string of values that denotes the client_secret for OAuth authorization",
        "type": "string",
        "format": "byte"
      },
      "CreatedApplicationKey": {
        "description": "A key to use the application to access connections",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "appKeyID": {
            "$ref": "#/components/schemas/ApplicationKeyID"
          },
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          },
          "clientID": {
            "$ref": "#/components/schemas/ClientID"
          },
          "clientSecret": {
            "$ref": "#/components/schemas/ClientSecret"
          },
          "lastUsed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "UpdateApplicationKey": {
        "description": "Fields to update on application key",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "$ref": "#/components/schemas/schemas-Name"
          },
          "description": {
            "$ref": "#/components/schemas/Description"
          },
          "origins": {
            "$ref": "#/components/schemas/Origins"
          }
        }
      },
      "ApplicationScopes": {
        "description": "List of scopes that this application will request access from another account.",
        "type": "array",
        "maxItems": 100,
        "items": {
          "$ref": "#/components/schemas/ApplicationScope"
        }
      },
      "Connection": {
        "description": "Model that represents a connection to this account",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "connectedTo": {
            "$ref": "#/components/schemas/AccountID"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "displayName": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "enabled": {
            "description": "Indicates whether or not the connected account is enabled",
            "type": "boolean",
            "default": false
          },
          "scopes": {
            "$ref": "#/components/schemas/ApplicationScopes"
          }
        }
      },
      "Amount": {
        "description": "A representation of money containing an integer value and its currency.",
        "type": "object",
        "properties": {
          "currency": {
            "description": "A 3-letter ISO 4217 currency code.",
            "type": "string",
            "pattern": "^[A-Za-z]+$",
            "example": "USD",
            "maxLength": 3,
            "x-go-custom-tag": "otel:\"currency\""
          },
          "value": {
            "description": "Quantity in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.",
            "type": "integer",
            "format": "int64",
            "example": 1204,
            "x-go-custom-tag": "otel:\"value\""
          }
        }
      },
      "DecimalString": {
        "description": "A decimal-formatted numerical string that represents up to 9 decimal place precision.",
        "type": "string",
        "pattern": "^\\d+\\.\\d{1,9}$",
        "example": "12.987654321"
      },
      "AvailableBalance": {
        "description": "Available balance of the wallet.",
        "required": [
          "value",
          "valueDecimal"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Amount"
          },
          {
            "type": "object",
            "properties": {
              "valueDecimal": {
                "description": "Same as `value`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DecimalString"
                  }
                ]
              }
            }
          }
        ]
      },
      "Wallet": {
        "description": "A Moov wallet to store funds for transfers.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "walletID": {
            "$ref": "#/components/schemas/UUID"
          },
          "availableBalance": {
            "$ref": "#/components/schemas/AvailableBalance"
          }
        }
      },
      "WalletTransactionType": {
        "description": "Wallet transaction type",
        "type": "string",
        "enum": [
          "ach-reversal",
          "card-payment",
          "cash-out",
          "dispute",
          "dispute-reversal",
          "facilitator-fee",
          "issuing-refund",
          "issuing-transaction",
          "issuing-transaction-adjustment",
          "issuing-auth-release",
          "issuing-decline",
          "moov-fee",
          "payment",
          "payout",
          "refund",
          "refund-failure",
          "top-up",
          "wallet-transfer"
        ]
      },
      "WalletTransactionSourceType": {
        "description": "Wallet transaction source type.",
        "type": "string",
        "enum": [
          "transfer",
          "dispute",
          "issuing-transaction"
        ]
      },
      "WalletTransactionStatus": {
        "description": "Wallet transaction status.",
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "canceled",
          "failed"
        ]
      },
      "WalletTransaction": {
        "description": "A transaction that funds or deducts from the wallet.",
        "type": "object",
        "required": [
          "grossAmount",
          "grossAmountDecimal",
          "fee",
          "feeDecimal",
          "netAmount",
          "netAmountDecimal"
        ],
        "properties": {
          "walletID": {
            "$ref": "#/components/schemas/UUID"
          },
          "transactionID": {
            "$ref": "#/components/schemas/UUID"
          },
          "transactionType": {
            "$ref": "#/components/schemas/WalletTransactionType"
          },
          "sourceType": {
            "$ref": "#/components/schemas/WalletTransactionSourceType"
          },
          "sourceID": {
            "description": "The ID of the Moov object to which this transaction is related.",
            "type": "string",
            "format": "uuid",
            "maxLength": 36,
            "example": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
            "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
          },
          "status": {
            "$ref": "#/components/schemas/WalletTransactionStatus"
          },
          "memo": {
            "description": "Detailed description of the transaction.",
            "type": "string"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "completedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "currency": {
            "description": "A 3-letter ISO 4217 currency code.",
            "type": "string",
            "pattern": "^[A-Za-z]+$",
            "example": "USD",
            "maxLength": 3
          },
          "grossAmount": {
            "description": "The total transaction amount. The amount is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.",
            "type": "integer",
            "format": "int64",
            "example": 1200
          },
          "grossAmountDecimal": {
            "description": "The total transaction amount. Same as `grossAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.",
            "example": "12.987654321",
            "$ref": "#/components/schemas/DecimalString"
          },
          "fee": {
            "description": "Total fees paid for the transaction. The value is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.",
            "type": "integer",
            "format": "int64",
            "example": 500
          },
          "feeDecimal": {
            "description": "Total fees paid for the transaction. Same as `fee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.",
            "example": "12.987654321",
            "$ref": "#/components/schemas/DecimalString"
          },
          "netAmount": {
            "description": "Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. The amount is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.",
            "type": "integer",
            "format": "int64",
            "example": 700
          },
          "netAmountDecimal": {
            "description": "Net amount is the gross amount less fees paid, and the amount that affects the wallet's balance. Same as `netAmount`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.",
            "example": "12.987654321",
            "$ref": "#/components/schemas/DecimalString"
          },
          "availableBalance": {
            "nullable": true,
            "description": "The wallet's total available balance after recording a completed transaction. The value is in the smallest unit of the specified currency. In USD this is cents, so $12.04 is 1204 and $0.99 would be 99.",
            "type": "integer",
            "format": "int64",
            "example": 1204
          },
          "availableBalanceDecimal": {
            "nullable": true,
            "description": "The wallet's total available balance after recording a completed transaction. Same as `availableBalance`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. In USD for example, 12.987654321 is $12.987654321 and 0.9987634521 is $0.9987634521.",
            "example": "12.987654321",
            "$ref": "#/components/schemas/DecimalString"
          }
        }
      },
      "TransferStatus": {
        "type": "string",
        "description": "Current status of a transfer.",
        "example": "pending",
        "enum": [
          "created",
          "pending",
          "completed",
          "failed",
          "reversed",
          "queued",
          "canceled"
        ]
      },
      "FailureReason": {
        "type": "string",
        "nullable": true,
        "description": "Reason for a transfer's failure.",
        "example": "wallet-insufficient-funds",
        "enum": [
          "source-payment-error",
          "destination-payment-error",
          "wallet-insufficient-funds",
          "rejected-high-risk",
          "processing-error"
        ]
      },
      "GetFacilitatorFee": {
        "description": "Fee you charged your customer for the transfer.",
        "nullable": true,
        "required": [
          "total"
        ],
        "properties": {
          "total": {
            "description": "Total facilitator fee in cents.",
            "type": "integer",
            "format": "int64"
          },
          "totalDecimal": {
            "description": "Same as `total`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.",
            "example": "12.987654321",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalString"
              }
            ]
          },
          "markup": {
            "description": "Markup facilitator fee in cents.",
            "type": "integer",
            "format": "int64"
          },
          "markupDecimal": {
            "description": "Same as `markup`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.",
            "example": "0.987654321",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalString"
              }
            ]
          }
        }
      },
      "MoovFeeDetails": {
        "description": "Processing and pass-through costs that add up to the moovFee.",
        "nullable": true,
        "required": [
          "moovProcessing"
        ],
        "properties": {
          "cardScheme": {
            "description": "Card scheme fees accrued during authorization and settlement. String type represents dollars with up to 9 decimal place precision.",
            "type": "string"
          },
          "interchange": {
            "description": "Card interchange fee. String type represents dollars with up to 9 decimal place precision.",
            "type": "string"
          },
          "moovProcessing": {
            "description": "Moov processing fee. String type represents dollars with up to 9 decimal place precision.",
            "type": "string"
          }
        }
      },
      "RefundStatus": {
        "type": "string",
        "example": "failed",
        "enum": [
          "created",
          "pending",
          "completed",
          "failed"
        ]
      },
      "CardFailureCode": {
        "nullable": true,
        "type": "string",
        "enum": [
          "call-issuer",
          "do-not-honor",
          "processing-error",
          "invalid-transaction",
          "invalid-amount",
          "no-such-issuer",
          "reenter-transaction",
          "cvv-mismatch",
          "lost-or-stolen",
          "insufficient-funds",
          "invalid-card-number",
          "expired-card",
          "incorrect-pin",
          "transaction-not-allowed",
          "suspected-fraud",
          "amount-limit-exceeded",
          "velocity-limit-exceeded",
          "card-not-activated",
          "issuer-not-available",
          "could-not-route",
          "cardholder-account-closed",
          "unknown-issue",
          "duplicate-transaction"
        ]
      },
      "RefundCardStatus": {
        "description": "Card status for refunds.",
        "type": "string",
        "enum": [
          "initiated",
          "confirmed",
          "settled",
          "failed",
          "completed"
        ]
      },
      "RefundCardStatusUpdates": {
        "type": "object",
        "description": "The timestamps associated with status changes",
        "nullable": true,
        "properties": {
          "initiated": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "confirmed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "settled": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "failed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "completed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          }
        }
      },
      "RefundCardDetails": {
        "type": "object",
        "nullable": true,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/RefundCardStatus"
          },
          "failureCode": {
            "$ref": "#/components/schemas/CardFailureCode"
          },
          "statusUpdates": {
            "$ref": "#/components/schemas/RefundCardStatusUpdates"
          }
        }
      },
      "GetRefund": {
        "type": "object",
        "description": "Details of a card refund.",
        "title": "Synchronous refund response",
        "properties": {
          "refundID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "status": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "failureCode": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardFailureCode"
              }
            ],
            "description": "This field is deprecated and will be removed in December 2023.",
            "deprecated": true,
            "nullable": true
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "cardDetails": {
            "$ref": "#/components/schemas/RefundCardDetails"
          }
        }
      },
      "GetRefunds": {
        "type": "array",
        "description": "A list of refunds for a card transfer.",
        "items": {
          "$ref": "#/components/schemas/GetRefund"
        }
      },
      "GetDispute": {
        "type": "object",
        "description": "Details of a card dispute.",
        "properties": {
          "disputeID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "GetDisputes": {
        "type": "array",
        "description": "A list of disputes for a card transfer.",
        "items": {
          "$ref": "#/components/schemas/GetDispute"
        }
      },
      "GetTransferBase": {
        "type": "object",
        "description": "Details about the transfer.",
        "properties": {
          "transferID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "completedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "status": {
            "$ref": "#/components/schemas/TransferStatus"
          },
          "failureReason": {
            "$ref": "#/components/schemas/FailureReason"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "description": {
            "description": "A description of the transfer.",
            "type": "string",
            "example": "Pay Instructor for May 15 Class",
            "maxLength": 128
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "facilitatorFee": {
            "$ref": "#/components/schemas/GetFacilitatorFee"
          },
          "moovFee": {
            "description": "Fee charged to your platform account for card transfers.",
            "type": "integer",
            "format": "int64"
          },
          "moovFeeDecimal": {
            "description": "Same as `moovFee`, but a decimal-formatted numerical string that represents up to 9 decimal place precision.",
            "type": "string",
            "example": "0.987654321"
          },
          "moovFeeDetails": {
            "$ref": "#/components/schemas/MoovFeeDetails"
          },
          "groupID": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          },
          "refundedAmount": {
            "description": "The total refunded amount for a card transfer.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "refunds": {
            "$ref": "#/components/schemas/GetRefunds"
          },
          "disputedAmount": {
            "description": "The total disputed amount for a card transfer.",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Amount"
              }
            ]
          },
          "disputes": {
            "$ref": "#/components/schemas/GetDisputes"
          }
        }
      },
      "PaymentMethodType": {
        "description": "The payment method type that represents a payment rail and directionality",
        "type": "string",
        "enum": [
          "moov-wallet",
          "ach-debit-fund",
          "ach-debit-collect",
          "ach-credit-standard",
          "ach-credit-same-day",
          "rtp-credit",
          "card-payment",
          "apple-pay",
          "push-to-card"
        ]
      },
      "GetTransferPartialAccount": {
        "type": "object",
        "properties": {
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "displayName": {
            "example": "Whole Body Fitness",
            "type": "string",
            "maxLength": 64
          }
        }
      },
      "BankAccountStatus": {
        "description": "The bank account status.",
        "type": "string",
        "enum": [
          "new",
          "verified",
          "verificationFailed",
          "pending",
          "errored"
        ]
      },
      "HolderType": {
        "description": "The type of holder on a funding source.",
        "type": "string",
        "enum": [
          "individual",
          "business"
        ]
      },
      "BankAccountType": {
        "description": "The bank account type.",
        "type": "string",
        "enum": [
          "checking",
          "savings",
          "unknown"
        ]
      },
      "BankAccountResponse": {
        "description": "Describes a bank account on a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "bankAccountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "fingerprint": {
            "description": "Once the bank account is linked, we don't reveal the full bank account number. The fingerprint acts as a way to identify whether two linked bank accounts are the same.",
            "example": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
            "type": "string",
            "maxLength": 100
          },
          "status": {
            "$ref": "#/components/schemas/BankAccountStatus"
          },
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "holderType": {
            "$ref": "#/components/schemas/HolderType"
          },
          "bankName": {
            "example": "Chase Bank",
            "type": "string"
          },
          "bankAccountType": {
            "$ref": "#/components/schemas/BankAccountType"
          },
          "routingNumber": {
            "type": "string"
          },
          "lastFourAccountNumber": {
            "example": "7000",
            "type": "string"
          }
        }
      },
      "WalletResponse": {
        "description": "A Moov wallet to store funds for transfers.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "walletID": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "Fingerprint": {
        "description": "Uniquely identifies a linked payment card or token.\nFor Apple Pay, the fingerprint is based on the tokenized card number and may vary based on the user's device.\nThis field can be used to identify specific payment methods across multiple accounts on your platform.\n",
        "type": "string",
        "example": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
        "maxLength": 100
      },
      "CardBrand": {
        "description": "The card brand.",
        "type": "string",
        "example": "Discover",
        "enum": [
          "American Express",
          "Discover",
          "Mastercard",
          "Visa"
        ]
      },
      "CardType": {
        "description": "The type of the card.",
        "type": "string",
        "enum": [
          "debit",
          "credit",
          "prepaid",
          "unknown"
        ]
      },
      "CardExpiration": {
        "description": "The expiration date of the linked card or token.",
        "type": "object",
        "properties": {
          "month": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "01"
          },
          "year": {
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "21"
          }
        }
      },
      "CardVerificationResult": {
        "type": "string",
        "example": "match",
        "enum": [
          "noMatch",
          "match",
          "notChecked",
          "unavailable"
        ]
      },
      "CardVerifications": {
        "description": "The results of submitting cardholder data to a card network for verification.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cvv": {
            "$ref": "#/components/schemas/CardVerificationResult"
          },
          "addressLine1": {
            "$ref": "#/components/schemas/CardVerificationResult"
          },
          "postalCode": {
            "$ref": "#/components/schemas/CardVerificationResult"
          }
        }
      },
      "MerchantAccountID": {
        "description": "Moov account ID of the merchant or entity authorized to store the card. Defaults to your platform account ID if cardOnFile is set to true and no other account is provided.",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "CardUpdateReason": {
        "description": "The results of the card update request.",
        "type": "string",
        "example": "number-update",
        "enum": [
          "unspecified",
          "account-closed",
          "contact-cardholder",
          "expiration-update",
          "no-change",
          "no-match",
          "number-update"
        ]
      },
      "CardAccountUpdater": {
        "description": "The results of the most recent card update request.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "updatedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "updateType": {
            "$ref": "#/components/schemas/CardUpdateReason"
          }
        }
      },
      "DomesticPushToCard": {
        "description": "Indicates which level of domestic push-to-card transfer is supported by the card, if any.",
        "type": "string",
        "example": "fast-funds",
        "enum": [
          "not-supported",
          "standard",
          "fast-funds",
          "unknown"
        ]
      },
      "Card": {
        "description": "Describes a card on a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cardID": {
            "$ref": "#/components/schemas/UUID"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "brand": {
            "$ref": "#/components/schemas/CardBrand"
          },
          "cardType": {
            "$ref": "#/components/schemas/CardType"
          },
          "lastFourCardNumber": {
            "example": "1234",
            "type": "string"
          },
          "bin": {
            "example": "123456",
            "type": "string"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          },
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/Address"
          },
          "cardVerification": {
            "$ref": "#/components/schemas/CardVerifications"
          },
          "issuer": {
            "example": "GRINGOTTS BANK",
            "type": "string"
          },
          "issuerCountry": {
            "example": "US",
            "type": "string"
          },
          "cardOnFile": {
            "description": "Indicates cardholder has authorized card to be stored for future payments.",
            "example": true,
            "type": "boolean",
            "default": false
          },
          "merchantAccountID": {
            "$ref": "#/components/schemas/MerchantAccountID"
          },
          "cardAccountUpdater": {
            "$ref": "#/components/schemas/CardAccountUpdater"
          },
          "domesticPushToCard": {
            "$ref": "#/components/schemas/DomesticPushToCard"
          }
        }
      },
      "ApplePayResponse": {
        "description": "Describes an Apple Pay token on a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "brand": {
            "$ref": "#/components/schemas/CardBrand"
          },
          "cardType": {
            "$ref": "#/components/schemas/CardType"
          },
          "cardDisplayName": {
            "description": "User-friendly name of the tokenized card returned by Apple. \nIt usually contains the brand and the last four digits of the underlying card for example, \"Visa 1256\". \nThere is no standard format.\n",
            "example": "Visa 1234",
            "type": "string"
          },
          "fingerprint": {
            "$ref": "#/components/schemas/Fingerprint"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          },
          "dynamicLastFour": {
            "description": "The last four digits of the Apple Pay token, which may differ from the tokenized card's last four digits",
            "type": "string",
            "example": "1234"
          }
        }
      },
      "ACHStatus": {
        "description": "ACH status.",
        "type": "string",
        "enum": [
          "initiated",
          "originated",
          "corrected",
          "returned",
          "completed"
        ]
      },
      "ACHException": {
        "type": "object",
        "nullable": true,
        "properties": {
          "code": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "CompanyEntryDescription": {
        "type": "string",
        "description": "An optional override of the default NACHA company entry description for a transfer.",
        "example": "Gym Dues",
        "minLength": 4,
        "maxLength": 10
      },
      "OriginatingCompanyName": {
        "type": "string",
        "description": "An optional override of the default NACHA company name for a transfer.",
        "example": "Whole Body Fit",
        "minLength": 4,
        "maxLength": 16
      },
      "ACHStatusUpdates": {
        "type": "object",
        "description": "The timestamps associated with status changes",
        "nullable": true,
        "properties": {
          "initiated": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "originated": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "corrected": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "returned": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "completed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          }
        }
      },
      "ACHDetailsBase": {
        "type": "object",
        "description": "ACH specific details about the transaction.",
        "nullable": true,
        "required": [
          "status",
          "traceNumber"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/ACHStatus"
          },
          "traceNumber": {
            "type": "string",
            "example": "124782618117",
            "maxLength": 15
          },
          "return": {
            "$ref": "#/components/schemas/ACHException"
          },
          "correction": {
            "$ref": "#/components/schemas/ACHException"
          },
          "companyEntryDescription": {
            "$ref": "#/components/schemas/CompanyEntryDescription"
          },
          "originatingCompanyName": {
            "$ref": "#/components/schemas/OriginatingCompanyName"
          },
          "statusUpdates": {
            "$ref": "#/components/schemas/ACHStatusUpdates"
          }
        }
      },
      "CardStatus": {
        "description": "Card status.",
        "type": "string",
        "enum": [
          "initiated",
          "confirmed",
          "canceled",
          "settled",
          "failed",
          "completed"
        ]
      },
      "DynamicDescriptor": {
        "type": "string",
        "description": "An optional override of the default card statement descriptor for a transfer.",
        "example": "WhlBdy *Yoga 11-12",
        "minLength": 4,
        "maxLength": 22
      },
      "TransactionSource": {
        "description": "Describes how the card transaction was initiated.",
        "type": "string",
        "nullable": true,
        "enum": [
          "first-recurring",
          "recurring",
          "unscheduled"
        ]
      },
      "CardStatusUpdates": {
        "type": "object",
        "description": "The timestamps associated with status changes",
        "nullable": true,
        "properties": {
          "initiated": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "confirmed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "settled": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "failed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "canceled": {
            "$ref": "#/components/schemas/OptionalDateTime"
          },
          "completed": {
            "$ref": "#/components/schemas/OptionalDateTime"
          }
        }
      },
      "CardDetails": {
        "type": "object",
        "nullable": true,
        "description": "Card-specific details about the transaction.",
        "required": [
          "status"
        ],
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CardStatus"
          },
          "failureCode": {
            "$ref": "#/components/schemas/CardFailureCode"
          },
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/DynamicDescriptor"
          },
          "transactionSource": {
            "$ref": "#/components/schemas/TransactionSource"
          },
          "interchangeQualification": {
            "type": "string",
            "nullable": true,
            "description": "The program assigned by the card network that determines the interchange rate for the transfer.",
            "example": "Visa Signature and Visa Infinite (Spend not-qualified) Product 1"
          },
          "statusUpdates": {
            "$ref": "#/components/schemas/CardStatusUpdates"
          }
        }
      },
      "GetTransferFullSourceDestination": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "$ref": "#/components/schemas/UUID"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "account": {
            "$ref": "#/components/schemas/GetTransferPartialAccount"
          },
          "bankAccount": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/BankAccountResponse"
              }
            ]
          },
          "wallet": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/WalletResponse"
              }
            ]
          },
          "card": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/Card"
              }
            ]
          },
          "applePay": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/ApplePayResponse"
              }
            ]
          },
          "achDetails": {
            "$ref": "#/components/schemas/ACHDetailsBase"
          },
          "cardDetails": {
            "$ref": "#/components/schemas/CardDetails"
          }
        }
      },
      "DebitHoldPeriod": {
        "type": "string",
        "description": "An optional override of your default ACH hold period in banking days. The hold period must be longer than or equal to your default setting.",
        "example": "2-days",
        "enum": [
          "no-hold",
          "2-days"
        ]
      },
      "ACHDetailsSource": {
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/ACHDetailsBase"
          },
          {
            "type": "object",
            "properties": {
              "debitHoldPeriod": {
                "$ref": "#/components/schemas/DebitHoldPeriod"
              }
            }
          }
        ]
      },
      "GetTransferFullSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GetTransferFullSourceDestination"
          },
          {
            "type": "object",
            "properties": {
              "transferID": {
                "$ref": "#/components/schemas/UUID"
              },
              "achDetails": {
                "$ref": "#/components/schemas/ACHDetailsSource"
              }
            }
          }
        ]
      },
      "GetTransferFull": {
        "title": "Synchronous transfer response",
        "allOf": [
          {
            "$ref": "#/components/schemas/GetTransferBase"
          },
          {
            "type": "object",
            "properties": {
              "source": {
                "$ref": "#/components/schemas/GetTransferFullSource"
              },
              "destination": {
                "$ref": "#/components/schemas/GetTransferFullSourceDestination"
              }
            }
          }
        ]
      },
      "GetTransfers": {
        "type": "array",
        "description": "A list of transfers.",
        "items": {
          "$ref": "#/components/schemas/GetTransferFull"
        }
      },
      "WaitFor": {
        "type": "string",
        "enum": [
          "rail-response"
        ]
      },
      "CreateCardDetails": {
        "type": "object",
        "nullable": true,
        "properties": {
          "dynamicDescriptor": {
            "$ref": "#/components/schemas/DynamicDescriptor"
          },
          "transactionSource": {
            "$ref": "#/components/schemas/TransactionSource"
          }
        }
      },
      "CreateACHDetailsBase": {
        "type": "object",
        "nullable": true,
        "properties": {
          "companyEntryDescription": {
            "$ref": "#/components/schemas/CompanyEntryDescription"
          },
          "originatingCompanyName": {
            "$ref": "#/components/schemas/OriginatingCompanyName"
          }
        }
      },
      "CreateAchDetailsSource": {
        "nullable": true,
        "allOf": [
          {
            "$ref": "#/components/schemas/CreateACHDetailsBase"
          },
          {
            "type": "object",
            "properties": {
              "debitHoldPeriod": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DebitHoldPeriod"
                  }
                ]
              }
            }
          }
        ]
      },
      "CreateFacilitatorFee": {
        "type": "object",
        "description": "Total or markup fee.",
        "properties": {
          "total": {
            "nullable": true,
            "description": "Total facilitator fee in cents. Only either `total` or `totalDecimal` can be set.",
            "type": "integer",
            "format": "int64"
          },
          "totalDecimal": {
            "nullable": true,
            "description": "Same as `total`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. Only either `total` or `totalDecimal` can be set. Set this field if you expect the fee to be in fractions of a cent.",
            "example": "12.987654321",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalString"
              }
            ]
          },
          "markup": {
            "nullable": true,
            "description": "Markup facilitator fee in cents. Only either `markup` or `markupDecimal` can be set.",
            "type": "integer",
            "format": "int64"
          },
          "markupDecimal": {
            "nullable": true,
            "description": "Same as `markup`, but a decimal-formatted numerical string that represents up to 9 decimal place precision. Only either `markup` or `markupDecimal` can be set. Set this field if you expect the fee to be in fractions of a cent.",
            "example": "0.987654321",
            "allOf": [
              {
                "$ref": "#/components/schemas/DecimalString"
              }
            ]
          }
        }
      },
      "CreateTransfer": {
        "type": "object",
        "properties": {
          "source": {
            "type": "object",
            "description": "The first stage of a transfer when it is being funded. For the source, you must include either a `paymentMethodID` or a `transferID`.",
            "properties": {
              "transferID": {
                "$ref": "#/components/schemas/UUID",
                "required": true
              },
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID",
                "required": true
              },
              "cardDetails": {
                "$ref": "#/components/schemas/CreateCardDetails"
              },
              "achDetails": {
                "$ref": "#/components/schemas/CreateAchDetailsSource"
              }
            }
          },
          "destination": {
            "type": "object",
            "description": "The final stage of a transfer and the ultimate recipient of the funds.",
            "properties": {
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID"
              },
              "achDetails": {
                "$ref": "#/components/schemas/CreateACHDetailsBase"
              }
            },
            "required": [
              "paymentMethodID"
            ]
          },
          "amount": {
            "$ref": "#/components/schemas/Amount",
            "required": true
          },
          "facilitatorFee": {
            "$ref": "#/components/schemas/CreateFacilitatorFee"
          },
          "description": {
            "description": "A description of the transfer.",
            "type": "string",
            "example": "Pay Instructor for May 15 Class",
            "maxLength": 128
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "required": [
          "source",
          "destination",
          "amount"
        ]
      },
      "TransferID": {
        "description": "Identifier for the transfer.",
        "type": "string",
        "format": "uuid",
        "maxLength": 36,
        "pattern": "^[0-9a-fA-F]{8}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{4}\\-[0-9a-fA-F]{12}$"
      },
      "CreatedTransfer": {
        "title": "Asynchronous transfer response",
        "type": "object",
        "properties": {
          "transferID": {
            "$ref": "#/components/schemas/TransferID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "TransferPostResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreatedTransfer"
          },
          {
            "$ref": "#/components/schemas/GetTransferFull"
          }
        ]
      },
      "PatchTransfer": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        }
      },
      "CreateTransferOptions": {
        "type": "object",
        "required": [
          "amount",
          "source",
          "destination"
        ],
        "properties": {
          "source": {
            "type": "object",
            "properties": {
              "accountID": {
                "$ref": "#/components/schemas/UUID"
              },
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          },
          "destination": {
            "type": "object",
            "properties": {
              "accountID": {
                "$ref": "#/components/schemas/UUID"
              },
              "paymentMethodID": {
                "$ref": "#/components/schemas/UUID"
              }
            }
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "BasicPaymentMethod": {
        "type": "object",
        "properties": {
          "paymentMethodID": {
            "$ref": "#/components/schemas/UUID"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodType"
          }
        }
      },
      "PaymentMethodWallet": {
        "title": "Wallet",
        "description": "A method of moving money that is a Moov wallet",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "wallet": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WalletResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethodBankAccount": {
        "title": "Bank account",
        "description": "A method of moving money that is a bank account",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "bankAccount": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BankAccountResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethodCard": {
        "title": "Card",
        "description": "A method of moving money that is a credit or debit card",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "card": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Card"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethodPushToCard": {
        "title": "Push to card",
        "description": "A method of crediting funds to a card",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "card": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Card"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethodApplePay": {
        "title": "Apple Pay",
        "description": "A method of moving money using an Apple Pay token.",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasicPaymentMethod"
          },
          {
            "type": "object",
            "properties": {
              "applePay": {
                "nullable": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ApplePayResponse"
                  }
                ]
              }
            }
          }
        ]
      },
      "PaymentMethod": {
        "description": "A method of moving money",
        "type": "object",
        "additionalProperties": false,
        "oneOf": [
          {
            "$ref": "#/components/schemas/PaymentMethodWallet"
          },
          {
            "$ref": "#/components/schemas/PaymentMethodBankAccount"
          },
          {
            "$ref": "#/components/schemas/PaymentMethodCard"
          },
          {
            "$ref": "#/components/schemas/PaymentMethodPushToCard"
          },
          {
            "$ref": "#/components/schemas/PaymentMethodApplePay"
          }
        ],
        "discriminator": {
          "propertyName": "paymentMethodType",
          "mapping": {
            "moov-wallet": "#/components/schemas/PaymentMethodWallet",
            "ach-debit-fund": "#/components/schemas/PaymentMethodBankAccount",
            "ach-debit-collect": "#/components/schemas/PaymentMethodBankAccount",
            "ach-credit-standard": "#/components/schemas/PaymentMethodBankAccount",
            "ach-credit-same-day": "#/components/schemas/PaymentMethodBankAccount",
            "rtp-credit": "#/components/schemas/PaymentMethodBankAccount",
            "card-payment": "#/components/schemas/PaymentMethodCard",
            "push-to-card": "#/components/schemas/PaymentMethodPushToCard",
            "apple-pay": "#/components/schemas/PaymentMethodApplePay"
          }
        }
      },
      "CreatedTransferOptions": {
        "type": "object",
        "properties": {
          "sourceOptions": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                },
                {
                  "type": "object",
                  "example": {
                    "paymentMethodID": "2b42ad2a-7586-4e55-a268-10d585186c27"
                  }
                }
              ]
            }
          },
          "destinationOptions": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PaymentMethod"
                },
                {
                  "type": "object",
                  "example": {
                    "paymentMethodID": "8485a2ce-c9b0-4d49-bfa1-60e88a79ce31"
                  }
                }
              ]
            }
          }
        }
      },
      "CreateRefund": {
        "type": "object",
        "description": "Specifies a partial amount to refund. This request body is optional, an empty body will issue a refund for the full amount of the original transfer.",
        "properties": {
          "amount": {
            "description": "Amount to refund in cents. If null, the original transfer's full amount will be refunded.",
            "type": "integer",
            "format": "int64",
            "example": 1000
          }
        }
      },
      "CreatedRefund": {
        "type": "object",
        "title": "Asynchronous refund response",
        "properties": {
          "refundID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "RefundPostResponse": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/CreatedRefund"
          },
          {
            "$ref": "#/components/schemas/GetRefund"
          }
        ]
      },
      "CreateReversal": {
        "type": "object",
        "properties": {
          "amount": {
            "description": "Amount to reverse in cents. If null, the original transfer's full amount will be reversed. Partial amounts will automatically trigger a refund instead of a cancellation.",
            "type": "integer",
            "format": "int64",
            "example": 1000
          }
        }
      },
      "CancellationStatus": {
        "description": "Cancellation status.",
        "type": "string",
        "enum": [
          "pending",
          "completed"
        ]
      },
      "CreatedCancellation": {
        "type": "object",
        "nullable": true,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/CancellationStatus"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "CreatedReversal": {
        "type": "object",
        "properties": {
          "cancellation": {
            "$ref": "#/components/schemas/CreatedCancellation"
          },
          "refund": {
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/GetRefund"
              }
            ]
          }
        }
      },
      "BankAccounts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/BankAccountResponse"
        }
      },
      "BankAccountIntegration": {
        "title": "Bank account",
        "description": "Describes the account to link to the Moov account.",
        "type": "object",
        "additionalProperties": false,
        "nullable": true,
        "properties": {
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "holderType": {
            "$ref": "#/components/schemas/HolderType"
          },
          "accountNumber": {
            "example": "0004321567000",
            "type": "string"
          },
          "bankAccountType": {
            "$ref": "#/components/schemas/BankAccountType"
          },
          "routingNumber": {
            "example": "123456789",
            "type": "string"
          }
        },
        "required": [
          "holderName",
          "holderType",
          "accountNumber",
          "accountType",
          "routingNumber",
          "bankAccountType"
        ]
      },
      "BankAccount": {
        "title": "Bank account",
        "description": "Describes the account to link to the Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "account": {
            "$ref": "#/components/schemas/BankAccountIntegration"
          }
        }
      },
      "PlaidIntegration": {
        "description": "The details of a Plaid processor integration for a linked funding source. <br><br> `sandbox` - When linking a bank account to a `sandbox` account using a Plaid processor token a default bank account response will be used. The following default data will be used to generate the bank account in this flow:\n```\n  RoutingNumber: \"011401533\",\n  AccountNumber: \"1111222233330000\",\n  AccountType:   \"checking\",\n  Mask:          \"0000\"\n```\n",
        "type": "object",
        "nullable": true,
        "properties": {
          "token": {
            "type": "string"
          }
        }
      },
      "Plaid": {
        "title": "Plaid Processor",
        "description": "Describes the account to link to the Moov account using a Plaid processor token.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "plaid": {
            "$ref": "#/components/schemas/PlaidIntegration"
          }
        }
      },
      "PlaidLinkIntegration": {
        "description": "This is used by Moov.js with a Plaid reseller relationship. The details of a Plaid link integration for a linked funding source. <br><br> `sandbox` - (requires Plaid reseller setup with Moov) When linking a bank account to a `sandbox` account using a Plaid public token it will utilize Plaid's sandbox environment. The Plaid public token provided must be generated from Plaid's sandbox environment. Please see <a href=\"https://plaid.com/docs/api/sandbox/#sandboxpublic_tokencreate\" target=\"_blank\">Plaid's sandbox documentation</a> for more details.",
        "type": "object",
        "nullable": true,
        "properties": {
          "publicToken": {
            "type": "string"
          }
        }
      },
      "PlaidLink": {
        "title": "Plaid Link",
        "description": "This is used by Moov.js with a Plaid reseller relationship. Describes the account to link to the Moov account using a Plaid using a Plaid public token.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "plaidLink": {
            "$ref": "#/components/schemas/PlaidLinkIntegration"
          }
        }
      },
      "MXAuthorizationCode": {
        "description": "The authorization code of a MX account which allows a processor to retrieve a linked payment account. <br><br> `sandbox` - When linking a bank account to a `sandbox` account using a MX authorization code it will utilize MX's sandbox environment. The MX authorization code provided must be generated from MX's sandbox environment.",
        "type": "object",
        "nullable": true,
        "properties": {
          "authorizationCode": {
            "type": "string"
          }
        }
      },
      "MX": {
        "title": "MX processor",
        "description": "Describes the account to link to the Moov account using a MX processor token. <br><br> `sandbox` - When linking a bank account to a `sandbox` account using an MX authorization token a default bank account routing number will be used. The following default data will be used to generate the bank account in this flow:\n```\n  RoutingNumber: \"123456780\",\n  BankName: \"Gringotts Bank\"\n```\n",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "mx": {
            "$ref": "#/components/schemas/MXAuthorizationCode"
          }
        }
      },
      "BankAccountPayload": {
        "type": "object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BankAccount"
          },
          {
            "$ref": "#/components/schemas/Plaid"
          },
          {
            "$ref": "#/components/schemas/PlaidLink"
          },
          {
            "$ref": "#/components/schemas/MX"
          }
        ]
      },
      "CompleteMicroDepositsRequest": {
        "description": "Request to complete the micro-deposit verification workflow.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "amounts": {
            "description": "Two positive integers, in cents, equal to the values of the micro-deposits sent to the bank account.",
            "example": [
              18,
              21
            ],
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      },
      "MicroDepositStatus": {
        "description": "The micro-deposit status.",
        "type": "string",
        "enum": [
          "verified"
        ]
      },
      "CompleteMicroDepositsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "status": {
            "$ref": "#/components/schemas/MicroDepositStatus"
          }
        }
      },
      "Cards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Card"
        }
      },
      "schemas-WaitFor": {
        "type": "string",
        "enum": [
          "payment-method"
        ]
      },
      "CardAddress": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "addressLine1": {
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 60
          },
          "addressLine2": {
            "type": "string",
            "example": "Apt 302",
            "maxLength": 32
          },
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "stateOrProvince": {
            "type": "string",
            "example": "CO",
            "maxLength": 2
          },
          "postalCode": {
            "type": "string",
            "example": "80301",
            "maxLength": 5
          },
          "country": {
            "type": "string",
            "example": "US",
            "maxLength": 2
          }
        },
        "required": [
          "postalCode"
        ]
      },
      "CardRequest": {
        "description": "Describes the card to link to the Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "cardNumber": {
            "type": "string"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          },
          "cardCvv": {
            "type": "string",
            "maxLength": 4,
            "minLength": 3,
            "example": "0123"
          },
          "holderName": {
            "example": "Jules Jackson",
            "type": "string"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/CardAddress"
          },
          "cardOnFile": {
            "description": "Indicates cardholder has authorized card to be stored for future payments.",
            "type": "boolean",
            "default": false
          },
          "merchantAccountID": {
            "$ref": "#/components/schemas/MerchantAccountID"
          }
        },
        "required": [
          "cardNumber",
          "expiration",
          "cardCvv",
          "billingAddress"
        ]
      },
      "UpdateCardExpiration": {
        "description": "Provide expiration date fields as necessary to patch the currently saved date. \nOmit any fields that should not be changed.\n",
        "type": "object",
        "nullable": true,
        "properties": {
          "month": {
            "nullable": true,
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "01"
          },
          "year": {
            "nullable": true,
            "type": "string",
            "maxLength": 2,
            "minLength": 2,
            "example": "21"
          }
        }
      },
      "CardVerificationValue": {
        "type": "string",
        "minLength": 3,
        "maxLength": 4,
        "example": "123"
      },
      "UpdateAddress": {
        "nullable": true,
        "type": "object",
        "additionalProperties": false,
        "description": "Provide address fields as necessary to patch the currently saved address. \nOmit any fields that should not be changed.\n",
        "properties": {
          "addressLine1": {
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 60,
            "nullable": true
          },
          "addressLine2": {
            "type": "string",
            "example": "Apt 302",
            "maxLength": 32,
            "nullable": true
          },
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24,
            "nullable": true
          },
          "stateOrProvince": {
            "type": "string",
            "example": "CO",
            "maxLength": 2,
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "example": "80301",
            "maxLength": 5,
            "nullable": true
          },
          "country": {
            "type": "string",
            "example": "US",
            "maxLength": 2,
            "nullable": true
          }
        }
      },
      "CardUpdateRequest": {
        "description": "Describes properties of a card to update.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "expiration": {
            "$ref": "#/components/schemas/UpdateCardExpiration"
          },
          "cardCvv": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CardVerificationValue"
              }
            ],
            "nullable": true,
            "description": "Provide a CVV to trigger a re-verification of this card. \nOmit CVV to update LinkedCard fields without re-verification.\n"
          },
          "billingAddress": {
            "$ref": "#/components/schemas/UpdateAddress"
          },
          "cardOnFile": {
            "description": "Indicates cardholder has authorized card to be stored for future payments.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "ApplePayMerchantDomains": {
        "properties": {
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "displayName": {
            "description": "A string of 64 or fewer UTF-8 characters. Displayed in the Buy button.\n",
            "example": "Example Merchant",
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "domains": {
            "description": "A list of fully qualified top-level or sub-domain names where you will accept Apple Pay.\n",
            "example": [
              "checkout.classbooker.dev"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "RegisterApplePayMerchantDomains": {
        "properties": {
          "displayName": {
            "description": "A string of 64 or fewer UTF-8 characters. Displayed in the Buy button.\n",
            "example": "Example Merchant",
            "maxLength": 64,
            "minLength": 0,
            "type": "string"
          },
          "domains": {
            "description": "A list of fully qualified top-level or sub-domain names where you will accept Apple Pay. Items must be unique.\n",
            "example": [
              "checkout.classbooker.dev"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "displayName",
          "domains"
        ]
      },
      "UpdateApplePayMerchantDomains": {
        "properties": {
          "addDomains": {
            "description": "A list of fully qualified top-level or sub-domain names to be added. Items must be unique.\n",
            "example": [
              "pay.classbooker.dev"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "removeDomains": {
            "description": "A list of previously added fully qualified top-level or sub-domain names to be removed.\n",
            "example": [
              "checkout.classbooker.dev"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        }
      },
      "CreateApplePaySession": {
        "properties": {
          "domain": {
            "type": "string",
            "example": "checkout.classbooker.dev"
          },
          "displayName": {
            "type": "string",
            "example": "Example Merchant",
            "minLength": 0,
            "maxLength": 64,
            "description": "A string of 64 or fewer UTF-8 characters. Displayed in the Buy button.\n"
          }
        },
        "required": [
          "domain",
          "displayName"
        ]
      },
      "ApplePaySession": {
        "properties": {},
        "description": "Stringified session object returned from Apple Pay. This should be converted to JSON when passed to Apple.\n"
      },
      "LinkApplePay": {
        "type": "object",
        "properties": {
          "token": {
            "type": "object",
            "properties": {
              "paymentData": {
                "type": "object",
                "properties": {
                  "version": {
                    "type": "string",
                    "example": "EC_v1"
                  },
                  "data": {
                    "type": "string",
                    "example": "3+f4oOTwPa6f1UZ6tG...CE="
                  },
                  "signature": {
                    "type": "string",
                    "example": "MIAGCSqGSIb3DQ.AAAA=="
                  },
                  "header": {
                    "type": "object",
                    "properties": {
                      "ephemeralPublicKey": {
                        "type": "string",
                        "example": "MFkwEK...Md=="
                      },
                      "publicKeyHash": {
                        "type": "string",
                        "example": "l0CnXdMv...D1I="
                      },
                      "transactionId": {
                        "type": "string",
                        "example": "32b...4f3"
                      }
                    },
                    "required": [
                      "ephemeralPublicKey",
                      "publicKeyHash",
                      "transactionId"
                    ]
                  }
                },
                "required": [
                  "version",
                  "data",
                  "signature",
                  "header"
                ]
              },
              "paymentMethod": {
                "type": "object",
                "properties": {
                  "displayName": {
                    "type": "string",
                    "example": "Visa 1234"
                  },
                  "network": {
                    "type": "string",
                    "example": "Visa"
                  },
                  "type": {
                    "type": "string",
                    "example": "debit"
                  }
                },
                "required": [
                  "displayName",
                  "network",
                  "type"
                ]
              },
              "transactionIdentifier": {
                "type": "string",
                "example": "32b...4f3"
              }
            },
            "required": [
              "paymentData",
              "paymentMethod",
              "transactionIdentifier"
            ]
          },
          "billingContact": {
            "type": "object",
            "properties": {
              "addressLines": {
                "example": [
                  "123 Sesame Street"
                ],
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "locality": {
                "example": "Phoenix",
                "type": "string"
              },
              "postalCode": {
                "example": "30345",
                "type": "string"
              },
              "administrativeArea": {
                "example": "AZ",
                "type": "string"
              },
              "countryCode": {
                "example": "US",
                "type": "string"
              }
            }
          }
        },
        "required": [
          "token"
        ]
      },
      "LinkedApplePayPaymentMethod": {
        "properties": {
          "paymentMethodID": {
            "type": "string",
            "description": "ID of the payment method"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "applePay": {
            "$ref": "#/components/schemas/ApplePayResponse"
          }
        },
        "required": [
          "paymentMethodID",
          "paymentMethodType",
          "applePay"
        ]
      },
      "NetworkIDs": {
        "properties": {
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "visaMid": {
            "type": "string",
            "example": "123456789012345",
            "nullable": true,
            "maxLength": 15
          },
          "mastercardMid": {
            "type": "string",
            "example": "123456789012345",
            "nullable": true,
            "maxLength": 15
          },
          "discoverMid": {
            "type": "string",
            "example": "123456789012345",
            "nullable": true,
            "maxLength": 15
          },
          "amexMid": {
            "type": "string",
            "example": "1234567890",
            "nullable": true,
            "maxLength": 10
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "maxLength": 24,
            "nullable": true
          }
        },
        "required": [
          "accountID"
        ]
      },
      "IssuedCardState": {
        "description": "State of a Moov issued card.",
        "type": "string",
        "enum": [
          "active",
          "inactive",
          "pending-verification",
          "closed"
        ]
      },
      "AuthorizedUser": {
        "description": "Fields for identifying an authorized individual.",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "birthDateProvided": {
            "type": "boolean",
            "example": true
          }
        }
      },
      "AuthorizationSpendDuration": {
        "description": "Unit of authorization limit control.",
        "type": "string",
        "enum": [
          "transaction"
        ]
      },
      "AuthorizationSpendLimitControl": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "Maximum value in cents allowed per duration.",
            "example": 10000
          },
          "duration": {
            "$ref": "#/components/schemas/AuthorizationSpendDuration"
          }
        }
      },
      "AuthorizationControls": {
        "type": "object",
        "properties": {
          "spendLimits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorizationSpendLimitControl"
            },
            "example": [
              {
                "amount": 10000,
                "duration": "transaction"
              }
            ]
          }
        }
      },
      "IssuedCardType": {
        "description": "Type of a Moov issued card.",
        "type": "string",
        "enum": [
          "single-use"
        ]
      },
      "IssuedCard": {
        "properties": {
          "issuedCardID": {
            "$ref": "#/components/schemas/UUID"
          },
          "brand": {
            "$ref": "#/components/schemas/CardBrand"
          },
          "lastFourCardNumber": {
            "example": "1234",
            "type": "string"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          },
          "authorizedUser": {
            "$ref": "#/components/schemas/AuthorizedUser"
          },
          "memo": {
            "type": "string",
            "description": "Optional descriptor for the card."
          },
          "authorizationControls": {
            "$ref": "#/components/schemas/AuthorizationControls"
          },
          "fundingWalletID": {
            "type": "string",
            "description": "Unique identifier for the wallet funding the card."
          },
          "state": {
            "$ref": "#/components/schemas/IssuedCardState"
          },
          "type": {
            "$ref": "#/components/schemas/IssuedCardType"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "IssuedCards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/IssuedCard"
        }
      },
      "CreateAuthorizedUser": {
        "description": "Fields for identifying an authorized individual.",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "Jane"
          },
          "lastName": {
            "type": "string",
            "example": "Doe"
          },
          "birthDate": {
            "$ref": "#/components/schemas/BirthDate"
          }
        }
      },
      "RequestCard": {
        "properties": {
          "fundingWalletID": {
            "type": "string"
          },
          "authorizedUser": {
            "$ref": "#/components/schemas/CreateAuthorizedUser"
          },
          "type": {
            "$ref": "#/components/schemas/IssuedCardType"
          },
          "memo": {
            "type": "string",
            "description": "Optional descriptive name"
          },
          "authorizationControls": {
            "$ref": "#/components/schemas/AuthorizationControls"
          }
        }
      },
      "UpdateIssuedCard": {
        "properties": {
          "state": {
            "$ref": "#/components/schemas/IssuedCardState"
          },
          "memo": {
            "type": "string",
            "description": "Optional descriptive name"
          },
          "authorizationControls": {
            "$ref": "#/components/schemas/AuthorizationControls"
          },
          "authorizedUser": {
            "$ref": "#/components/schemas/CreateAuthorizedUser"
          }
        }
      },
      "PCICardDetails": {
        "properties": {
          "pan": {
            "type": "string",
            "minLength": 16,
            "maxLength": 19,
            "example": "1234560000007890"
          },
          "cvv": {
            "$ref": "#/components/schemas/CardVerificationValue"
          },
          "expiration": {
            "$ref": "#/components/schemas/CardExpiration"
          }
        }
      },
      "FullIssuedCard": {
        "description": "Issued card with PAN, CVV, and expiration",
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/IssuedCard"
          },
          {
            "$ref": "#/components/schemas/PCICardDetails"
          }
        ]
      },
      "IssuedCardTransactionStatus": {
        "description": "Status of the transaction.",
        "type": "string",
        "enum": [
          "pending",
          "completed",
          "declined",
          "voided"
        ]
      },
      "IssuedCardTransactionType": {
        "description": "Type of transaction.",
        "type": "string",
        "enum": [
          "purchase",
          "refund"
        ]
      },
      "IssuedCardTransactionMerchant": {
        "properties": {
          "networkID": {
            "description": "External identifier used to identify the merchant with the card brand.",
            "type": "string",
            "example": "1234567890"
          },
          "name": {
            "description": "Name of merchant or company",
            "type": "string",
            "example": "Whole Body Fitness"
          },
          "city": {
            "description": "Location of merchant",
            "type": "string",
            "example": "San Francisco"
          },
          "country": {
            "description": "Two-letter code of the merchant country",
            "type": "string",
            "example": "US"
          },
          "postalCode": {
            "description": "Five digit postal code",
            "type": "string",
            "example": "94107"
          },
          "state": {
            "description": "Two-letter code of merchant state",
            "type": "string",
            "example": "CA"
          },
          "mcc": {
            "description": "Merchant category code",
            "type": "string",
            "example": "7298"
          }
        }
      },
      "IssuedCardTransaction": {
        "properties": {
          "transactionID": {
            "$ref": "#/components/schemas/UUID"
          },
          "issuedCardID": {
            "$ref": "#/components/schemas/UUID"
          },
          "fundingWalletID": {
            "$ref": "#/components/schemas/UUID"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "type": {
            "$ref": "#/components/schemas/IssuedCardTransactionType"
          },
          "status": {
            "$ref": "#/components/schemas/IssuedCardTransactionStatus"
          },
          "merchantData": {
            "$ref": "#/components/schemas/IssuedCardTransactionMerchant"
          },
          "transactionDateTime": {
            "$ref": "#/components/schemas/DateTime"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "IssuedCardTransactions": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/IssuedCardTransaction"
        }
      },
      "DisputeStatus": {
        "description": "The status of a particular dispute. Read our [disputes guide](https://docs.moov.io/guides/money-movement/cards/disputes/#dispute-statuses) to learn what each status  means.",
        "type": "string",
        "example": "response-needed",
        "enum": [
          "response-needed",
          "resolved"
        ]
      },
      "Transfer": {
        "description": "Details about the transfer.",
        "type": "object",
        "properties": {
          "transferID": {
            "$ref": "#/components/schemas/UUID"
          }
        }
      },
      "Dispute": {
        "description": "Details about the card dispute.",
        "type": "object",
        "properties": {
          "disputeID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "networkReasonCode": {
            "description": "Indicates the card network’s category for the dispute. These codes may differ between card brands. You can find more information on the code from the networkReasonDescription field.",
            "type": "string"
          },
          "networkReasonDescription": {
            "description": "Provides detail on the card network's categorization of the dispute.",
            "type": "string"
          },
          "transfer": {
            "$ref": "#/components/schemas/Transfer"
          },
          "respondBy": {
            "$ref": "#/components/schemas/DateTime"
          },
          "status": {
            "$ref": "#/components/schemas/DisputeStatus"
          }
        }
      },
      "FilePurpose": {
        "description": "The file purpose.",
        "type": "string",
        "enum": [
          "identity_verification",
          "business_verification",
          "representative_verification",
          "individual_verification",
          "merchant_underwriting",
          "account_requirement"
        ]
      },
      "FileStatus": {
        "description": "The file status.",
        "type": "string",
        "enum": [
          "pending",
          "approved",
          "rejected"
        ]
      },
      "File": {
        "title": "File",
        "description": "Describes a file linked to a Moov account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "fileID": {
            "$ref": "#/components/schemas/UUID"
          },
          "fileName": {
            "example": "logo.png",
            "type": "string",
            "maxLength": 64
          },
          "filePurpose": {
            "$ref": "#/components/schemas/FilePurpose"
          },
          "fileStatus": {
            "$ref": "#/components/schemas/FileStatus"
          },
          "metadata": {
            "example": "{\"representative_id\": \"c63ab175-251d-497e-a267-7346d087e180\"}",
            "type": "string"
          },
          "decisionReason": {
            "example": "not correct file",
            "type": "string"
          },
          "fileSizeBytes": {
            "example": 1024,
            "type": "integer"
          },
          "accountID": {
            "$ref": "#/components/schemas/UUID"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Files": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/File"
        }
      },
      "FileUploadRequest": {
        "description": "Request to attach a file to an account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "description": "The file to be added. Valid types are [csv, png, jpeg, pdf]."
          },
          "filePurpose": {
            "$ref": "#/components/schemas/FilePurpose"
          },
          "metadata": {
            "description": "Additional metadata to be stored with the file. Valid keys are [representative_id, requirement_id]",
            "format": "json",
            "type": "string"
          }
        },
        "required": [
          "file",
          "filePurpose"
        ]
      },
      "UnderwritingStatus": {
        "description": "The status of underwriting for an account",
        "type": "string",
        "enum": [
          "approved",
          "rejected",
          "pendingReview",
          "pending",
          "notRequested"
        ]
      },
      "Underwriting": {
        "description": "Describes underwriting values (in USD) used for card payment acceptance",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "averageTransactionSize": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "maxTransactionSize": {
            "type": "integer",
            "format": "int64",
            "example": 50000
          },
          "averageMonthlyTransactionVolume": {
            "type": "integer",
            "format": "int64",
            "example": 250000
          },
          "status": {
            "$ref": "#/components/schemas/UnderwritingStatus"
          }
        }
      },
      "UnderwritingRequest": {
        "description": "Describes underwriting values (in USD) used for card payment acceptance",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "averageTransactionSize": {
            "type": "integer",
            "format": "int64",
            "example": 10000
          },
          "maxTransactionSize": {
            "type": "integer",
            "format": "int64",
            "example": 50000
          },
          "averageMonthlyTransactionVolume": {
            "type": "integer",
            "format": "int64",
            "example": 250000
          }
        }
      },
      "PaymentMethods": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PaymentMethod"
        }
      },
      "CapabilityStatus": {
        "description": "The status of the capability requested for an account.",
        "type": "string",
        "enum": [
          "enabled",
          "disabled",
          "pending"
        ]
      },
      "RequirementID": {
        "description": "The unique ID of what the requirement is asking to be filled out.",
        "type": "string",
        "enum": [
          "account.tos-acceptance",
          "individual.mobile",
          "individual.email",
          "individual.email-or-mobile",
          "individual.firstname",
          "individual.lastname",
          "individual.address",
          "individual.ssn-last4",
          "individual.ssn",
          "individual.birthdate",
          "business.legalname",
          "business.description-or-website",
          "business.entity-type",
          "business.dba",
          "business.ein",
          "business.address",
          "business.phone",
          "business.admins",
          "business.controllers",
          "business.owners",
          "business.classification",
          "business.industry-code-mcc",
          "business.indicate-owners-provided",
          "business.average-transaction-size",
          "business.max-transaction-size",
          "business.average-monthly-transaction-volume",
          "business.description",
          "business.underwriting-documents-tier-one",
          "bank-accounts.name",
          "bank-accounts.routing-number",
          "bank-accounts.account-number",
          "document.business.verification",
          "document.individual.tin",
          "document.individual.verification",
          "document.representative.{rep-uuid}.tin",
          "document.representative.{rep-uuid}.verification",
          "representative.{rep-uuid}.mobile",
          "representative.{rep-uuid}.email",
          "representative.{rep-uuid}.email-or-mobile",
          "representative.{rep-uuid}.firstname",
          "representative.{rep-uuid}.lastname",
          "representative.{rep-uuid}.address",
          "representative.{rep-uuid}.ssn-last4",
          "representative.{rep-uuid}.ssn",
          "representative.{rep-uuid}.birthdate",
          "representative.{rep-uuid}.job-title",
          "representative.{rep-uuid}.is-controller",
          "representative.{rep-uuid}.is-owner",
          "representative.{rep-uuid}.ownership",
          "document.{doc-uuid}"
        ]
      },
      "RequirementErrorCode": {
        "type": "string",
        "enum": [
          "invalid-value",
          "failed-automatic-verification",
          "failed-other",
          "invalid-address",
          "address-restricted",
          "tax-id-mismatch",
          "document-id-mismatch",
          "document-date-of-birth-mismatch",
          "document-name-mismatch",
          "document-address.mismatch",
          "document-number-mismatch",
          "document-incomplete",
          "document-failed-risk",
          "document-illegible",
          "document-unsupported",
          "document-not-uploaded",
          "document-corrupt",
          "document-expired"
        ]
      },
      "RequirementError": {
        "description": "Describes an error fulfilling a Requirement",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "requirement": {
            "$ref": "#/components/schemas/RequirementID"
          },
          "errorCode": {
            "$ref": "#/components/schemas/RequirementErrorCode"
          }
        }
      },
      "Requirement": {
        "description": "Represents individual and business data necessary to facilitate the enabling of a capability for an account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "currentlyDue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequirementID"
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequirementError"
            }
          }
        }
      },
      "Capability": {
        "description": "Describes an action or set of actions that an account is permitted to perform.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "capability": {
            "$ref": "#/components/schemas/CapabilityID"
          },
          "accountID": {
            "$ref": "#/components/schemas/AccountID"
          },
          "status": {
            "$ref": "#/components/schemas/CapabilityStatus"
          },
          "requirements": {
            "$ref": "#/components/schemas/Requirement"
          },
          "disabledReason": {
            "description": "If status is `disabled`, the reason this capability was disabled.",
            "type": "string"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "disabledOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          }
        },
        "required": [
          "capability",
          "status",
          "createdOn",
          "updatedOn"
        ]
      },
      "AddCapabilityRequest": {
        "description": "Request to add a capability to an account.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CapabilityID"
            }
          }
        },
        "required": [
          "capabilities"
        ]
      },
      "CapabilityRequestError": {
        "description": "Error response for failed  HTTP requests.",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "error": {
            "example": "cannot request capabilities for an account with failed verification",
            "type": "string"
          }
        }
      },
      "Industry": {
        "description": "Describes an industry and its related codes",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string",
            "example": "AC, Refrigeration Repair"
          },
          "naics": {
            "type": "string",
            "description": "North American Industry Classification System",
            "example": "811412",
            "maxLength": 6
          },
          "sic": {
            "type": "string",
            "description": "Standard Industrial Classification",
            "example": "7623",
            "maxLength": 4
          },
          "mcc": {
            "type": "string",
            "description": "Merchant Category Code",
            "example": "7623",
            "maxLength": 4
          }
        }
      },
      "Industries": {
        "description": "A list of industries and their MCC/SIC/NAICS codes",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "industries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Industry"
            }
          }
        }
      },
      "Rail": {
        "description": "A supported payment rail.",
        "type": "string",
        "enum": [
          "ach",
          "wire"
        ]
      },
      "AchLocation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "address": {
            "type": "string",
            "example": "123 Main Street",
            "maxLength": 32
          },
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "state": {
            "type": "string",
            "example": "Colorado",
            "maxLength": 24
          },
          "postalCode": {
            "type": "string",
            "example": "80301",
            "maxLength": 5
          },
          "postalCodeExtension": {
            "type": "string",
            "example": "0000",
            "maxLength": 4
          }
        }
      },
      "AchParticipant": {
        "description": "Financial institution information regarding an ACH participant",
        "type": "object",
        "properties": {
          "routingNumber": {
            "example": "123456789",
            "type": "string",
            "maxLength": 9
          },
          "officeCode": {
            "example": "0",
            "type": "string"
          },
          "servicingFRBNumber": {
            "example": "123456789",
            "type": "string"
          },
          "recordTypeCode": {
            "example": "1",
            "type": "string"
          },
          "revised": {
            "example": "041921",
            "type": "string"
          },
          "newRoutingNumber": {
            "example": "987654321",
            "type": "string",
            "maxLength": 9
          },
          "customerName": {
            "example": "Main Street Bank",
            "type": "string"
          },
          "phoneNumber": {
            "example": "123-456-7789",
            "type": "string"
          },
          "statusCode": {
            "example": "1",
            "type": "string"
          },
          "viewCode": {
            "example": "1",
            "type": "string"
          },
          "achLocation": {
            "$ref": "#/components/schemas/AchLocation"
          }
        }
      },
      "WireLocation": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "city": {
            "type": "string",
            "example": "Boulder",
            "maxLength": 24
          },
          "state": {
            "type": "string",
            "example": "Colorado",
            "maxLength": 24
          }
        }
      },
      "WireParticipant": {
        "description": "Financial institution information regarding a wire participant",
        "type": "object",
        "properties": {
          "routingNumber": {
            "example": "123456789",
            "type": "string",
            "maxLength": 9
          },
          "telegraphicName": {
            "example": "MN STR BNK",
            "type": "string"
          },
          "customerName": {
            "example": "Main Street Bank",
            "type": "string"
          },
          "location": {
            "$ref": "#/components/schemas/WireLocation"
          },
          "fundsTransferStatus": {
            "example": "Y",
            "type": "string"
          },
          "fundsSettlementOnlyStatus": {
            "example": " ",
            "type": "string"
          },
          "bookEntrySecuritiesTransferStatus": {
            "example": "Y",
            "type": "string"
          },
          "date": {
            "example": "20000222",
            "type": "string"
          }
        }
      },
      "FinancialInstitutions": {
        "description": "List of all of the financial institutions found from a search",
        "type": "object",
        "properties": {
          "achParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AchParticipant"
            }
          },
          "wireParticipants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WireParticipant"
            }
          }
        }
      },
      "EnrichmentAddress": {
        "description": "Describes a suggested address",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "addressLine1": {
            "type": "string",
            "example": "123 Main St"
          },
          "addressLine2": {
            "type": "string",
            "example": "Apt"
          },
          "city": {
            "type": "string",
            "example": "Honolulu"
          },
          "stateOrProvince": {
            "type": "string",
            "example": "HI"
          },
          "postalCode": {
            "type": "string",
            "example": "96818"
          },
          "entries": {
            "type": "integer",
            "example": 75
          }
        }
      },
      "EnrichedIndustryCodes": {
        "description": "Describes industry specific identifiers",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "naics": {
            "type": "string",
            "example": "480184"
          },
          "sic": {
            "type": "string",
            "example": "3750"
          }
        }
      },
      "EnrichedBusiness": {
        "description": "Describes a company",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "legalBusinessName": {
            "type": "string",
            "example": "Moov Financial Inc"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          },
          "phone": {
            "$ref": "#/components/schemas/Phone"
          },
          "industryCodes": {
            "$ref": "#/components/schemas/EnrichedIndustryCodes"
          },
          "website": {
            "type": "string",
            "example": "moov.io"
          }
        }
      },
      "EnrichmentProfile": {
        "description": "Describes an enriched business profile",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "business": {
            "$ref": "#/components/schemas/EnrichedBusiness"
          }
        }
      },
      "Status": {
        "description": "The status of the resource.",
        "type": "string",
        "enum": [
          "enabled",
          "disabled"
        ]
      },
      "EnabledEventTypes": {
        "description": "The list of event types that the webhook is subscribed to.\n`[\"*\"]` indicates the webhook is subscribed to all current and future event types.\n",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "AllowlistedOrganizationIDs": {
        "description": "The allow list of organizationIDs that is enabled on a webhook.\nIn other words, the webhook will only be triggered by events related to allow listed organizationIDs.\n`[\"*\"]` indicates all organizations are allow listed.\n",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "Webhook": {
        "properties": {
          "webhookID": {
            "description": "Unique identifier for this webhook.",
            "allOf": [
              {
                "$ref": "#/components/schemas/UUID"
              }
            ]
          },
          "url": {
            "description": "The URL of the webhook endpoint. Event payloads will be delivered to this URL.",
            "type": "string"
          },
          "description": {
            "type": "string",
            "description": "An optional description of what the webhook is used for."
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/EnabledEventTypes"
          },
          "organizations": {
            "$ref": "#/components/schemas/AllowlistedOrganizationIDs"
          },
          "createdOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updatedOn": {
            "$ref": "#/components/schemas/DateTime"
          },
          "lastUsedOn": {
            "$ref": "#/components/schemas/OptionalDateTime"
          }
        },
        "required": [
          "webhookID",
          "url",
          "status",
          "eventTypes",
          "organizations",
          "createdOn",
          "updatedOn"
        ]
      },
      "CreateWebhook": {
        "properties": {
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/EnabledEventTypes"
          },
          "organizations": {
            "$ref": "#/components/schemas/AllowlistedOrganizationIDs"
          }
        },
        "required": [
          "url",
          "status",
          "eventTypes",
          "organizations"
        ]
      },
      "ValidationError": {
        "description": "Descriptive reason for failing validation.",
        "type": "string",
        "nullable": true,
        "readOnly": true
      },
      "WebhookErrors": {
        "description": "Request to create a webhook",
        "type": "object",
        "properties": {
          "url": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "status": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/ValidationError"
          },
          "organizations": {
            "$ref": "#/components/schemas/ValidationError"
          }
        }
      },
      "UpdateWebhook": {
        "properties": {
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "eventTypes": {
            "$ref": "#/components/schemas/EnabledEventTypes"
          },
          "organizations": {
            "$ref": "#/components/schemas/AllowlistedOrganizationIDs"
          }
        },
        "required": [
          "url",
          "status",
          "eventTypes",
          "organizations"
        ]
      },
      "PingResponse": {
        "properties": {
          "webhook": {
            "$ref": "#/components/schemas/Webhook"
          },
          "requestBodySent": {
            "type": "object",
            "description": "The request body sent to the target URL. It will contain an event type of `event.test` and an empty (null) data payload."
          },
          "responseStatusCode": {
            "type": "integer",
            "description": "The response status code after sending a ping event to the URL."
          }
        }
      },
      "WebhookSecretKey": {
        "description": "Webhook secret key used to verify that a request came from Moov",
        "properties": {
          "secret": {
            "type": "string",
            "nullable": false
          }
        },
        "required": [
          "secret"
        ]
      },
      "EventType": {
        "type": "string",
        "description": "The event type a webhook can subscribe to.",
        "enum": [
          "*",
          "account.created",
          "account.deleted",
          "account.updated",
          "balance.updated",
          "bankAccount.created",
          "bankAccount.deleted",
          "bankAccount.updated",
          "card.autoUpdated",
          "capability.requested",
          "capability.updated",
          "dispute.created",
          "paymentMethod.disabled",
          "paymentMethod.enabled",
          "refund.created",
          "refund.updated",
          "representative.created",
          "representative.deleted",
          "representative.updated",
          "transfer.created",
          "transfer.updated",
          "walletTransaction.updated"
        ]
      },
      "EventTypeObject": {
        "description": "The type of event that Moov can generate.",
        "properties": {
          "eventTypeID": {
            "$ref": "#/components/schemas/UUID"
          },
          "type": {
            "$ref": "#/components/schemas/EventType"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "eventTypeID",
          "type",
          "description"
        ]
      },
      "TimeRange": {
        "description": "Specify a time range between two timestamps and then the interval duration for each result in the specific `tz` timezone",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/DateTime"
          },
          "to": {
            "$ref": "#/components/schemas/DateTime"
          },
          "every": {
            "$ref": "#/components/schemas/DateTime"
          },
          "tz": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "TransferSum": {
        "description": "Sum of all transfers between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "type": "integer"
          }
        }
      },
      "LimitedTimeRange": {
        "description": "Return `count` number of results within time range between two timestamps and then the interval duration for each result in the specific `tz` timezone",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "from": {
            "$ref": "#/components/schemas/DateTime"
          },
          "to": {
            "$ref": "#/components/schemas/DateTime"
          },
          "every": {
            "type": "string",
            "format": "timezone"
          },
          "tz": {
            "type": "string",
            "format": "timezone"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "SpecificTransfer": {
        "description": "Return a specific transfer result for the time frame between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "transfer_id": {
            "$ref": "#/components/schemas/UUID"
          },
          "created_on": {
            "$ref": "#/components/schemas/DateTime"
          },
          "amount": {
            "type": "integer"
          }
        }
      },
      "TransferStatusCount": {
        "description": "Count all unique transfer statuses between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "status": {
            "type": "string"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "ProfilesCreatedInterval": {
        "description": "Count all profile types between two timestamps",
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "start": {
            "$ref": "#/components/schemas/DateTime"
          },
          "stop": {
            "$ref": "#/components/schemas/DateTime"
          },
          "profile": {
            "type": "string",
            "format": "timezone"
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "AccountUpdated": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          }
        }
      },
      "TransferPaymentMethod": {
        "type": "object",
        "properties": {
          "accountID": {
            "type": "string",
            "description": "ID of the account"
          },
          "paymentMethodID": {
            "type": "string",
            "description": "ID of the payment method"
          }
        }
      },
      "CardUpdateType": {
        "description": "Result of the card update",
        "type": "string",
        "enum": [
          "account-closed",
          "contact-cardholder",
          "expiration-update",
          "number-update"
        ]
      }
    },
    "securitySchemes": {
      "AccessToken": {
        "type": "oauth2",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "/oauth2/authorize",
            "tokenUrl": "/oauth2/token",
            "scopes": {
              "profile.read": "Grants access to read a profile"
            }
          }
        }
      },
      "OAuth2Credentials": {
        "description": "Basic authentication per the OAuth 2.0 specification for authenticating key usage per \n[section 2.3.1 of RFC 6749](https://tools.ietf.org/html/rfc6749#section-2.3.1). \nUsername would be the `client_id` and password would be the `client_secret`. If not \nauthorized a 401 code will be returned. This authentication method is optional but preferred \nto passing the `client_id ` and `client_secret` in the body of the request.\n",
        "type": "http",
        "scheme": "basic"
      },
      "GatewayAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT that comes from the gateway that validates against the gateways public RSA key"
      }
    },
    "responses": {
      "Empty": {
        "description": "Empty response for unauthorized or any other returned http status code.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "NoContent": {
        "description": "Successful empty response for unauthorized or any other returned http status code.",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "RateLimited": {
        "description": "Request was refused due to rate limiting.",
        "headers": {
          "X-Retry-In": {
            "description": "How long (in milliseconds) to wait until able to retry the request.",
            "schema": {
              "type": "string",
              "format": "duration",
              "example": "46.748934ms"
            }
          }
        },
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "Disabled": {
        "description": "Successfully disabled resource",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "\\s{0}"
            }
          }
        }
      },
      "Error": {
        "description": "Invalid request, an error message will be available in the response body.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "responses-Empty": {
        "description": "Empty response for unauthorized or any other returned http status code",
        "content": {
          "text/plain": {
            "schema": {
              "type": "string",
              "example": "",
              "maxLength": 0,
              "pattern": "//i"
            }
          }
        }
      },
      "TransferSums": {
        "description": "Sum of all transfers during each interval",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/TransferSum"
              }
            }
          }
        }
      },
      "SpecificTransfers": {
        "description": "Return specific transfer IDs and amounts of the largest or smallest transfers per interval",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/SpecificTransfer"
              }
            }
          }
        }
      },
      "TransferStatusCounts": {
        "description": "Counts the statuses transfers are in",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/TransferStatusCount"
              }
            }
          }
        }
      },
      "ProfilesCreated": {
        "description": "Profiles created during each interval",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "maxItems": 100,
              "items": {
                "$ref": "#/components/schemas/ProfilesCreatedInterval"
              }
            }
          }
        }
      }
    },
    "parameters": {
      "ProviderID": {
        "in": "path",
        "name": "providerID",
        "required": true,
        "description": "Name of the Provider to use",
        "schema": {
          "type": "string",
          "example": "my-oidc-provider",
          "maxLength": 20,
          "pattern": "^[a-z0-9-]+$"
        }
      },
      "XAccountID": {
        "description": "ID of the account.",
        "explode": false,
        "in": "header",
        "name": "X-Account-ID",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/AccountID"
        },
        "style": "simple"
      },
      "Count": {
        "name": "count",
        "in": "query",
        "description": "Optional parameter to limit the number of results in the query.",
        "example": 10,
        "schema": {
          "type": "integer",
          "default": 20,
          "maximum": 200
        }
      },
      "Skip": {
        "name": "skip",
        "in": "query",
        "description": "The number of items to offset before starting to collect the result set.",
        "example": 10,
        "schema": {
          "type": "integer"
        }
      },
      "AccountID": {
        "description": "ID of the account.",
        "explode": false,
        "in": "path",
        "name": "accountID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/AccountID"
        },
        "style": "simple"
      },
      "RepresentativeID": {
        "description": "ID of the representative.",
        "explode": false,
        "in": "path",
        "name": "representativeID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "ApplicationID": {
        "description": "ID of the application",
        "explode": false,
        "in": "path",
        "name": "applicationID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ApplicationID"
        },
        "style": "simple"
      },
      "ApplicationKeyID": {
        "description": "ID of the application key",
        "explode": false,
        "in": "path",
        "name": "applicationKeyID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ApplicationKeyID"
        },
        "style": "simple"
      },
      "WalletID": {
        "description": "ID of the wallet",
        "explode": false,
        "in": "path",
        "name": "walletID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "parameters-Count": {
        "name": "count",
        "in": "query",
        "description": "Optional parameter to limit the number of results in the query.",
        "example": 10,
        "schema": {
          "type": "integer",
          "default": 20
        }
      },
      "parameters-AccountID": {
        "description": "Identifier for a connected account.",
        "in": "query",
        "name": "accountID",
        "schema": {
          "$ref": "#/components/schemas/AccountID"
        }
      },
      "TransferID": {
        "description": "Identifier for the transfer.",
        "explode": false,
        "in": "path",
        "name": "transferID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransferID"
        },
        "style": "simple"
      },
      "RefundID": {
        "description": "Identifier for the refund.",
        "explode": false,
        "in": "path",
        "name": "refundID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "BankAccountID": {
        "description": "ID of the bank account",
        "explode": false,
        "in": "path",
        "name": "bankAccountID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "CardID": {
        "description": "ID of the card",
        "explode": false,
        "in": "path",
        "name": "cardID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "IssuedCardID": {
        "description": "ID of the issued card.",
        "explode": false,
        "in": "path",
        "name": "issuedCardID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "OrderBy": {
        "name": "orderBy",
        "in": "query",
        "description": "Optional parameter to order the results in the query.",
        "example": "created-at:desc",
        "schema": {
          "type": "string"
        }
      },
      "FileID": {
        "description": "Identifier for the file.",
        "explode": false,
        "in": "path",
        "name": "fileID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "PaymentMethodID": {
        "description": "ID of the payment method. Can be one of `walletID`, `cardID`, or `bankAccountID`.",
        "explode": false,
        "in": "path",
        "name": "paymentMethodID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/UUID"
        },
        "style": "simple"
      },
      "CapabilityID": {
        "description": "The requested capability identifier.",
        "explode": false,
        "in": "path",
        "name": "capabilityID",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/CapabilityID"
        },
        "style": "simple"
      },
      "Rail": {
        "description": "Payment rail to search on",
        "explode": false,
        "in": "path",
        "name": "rail",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Rail"
        },
        "style": "simple"
      },
      "UniqueID": {
        "description": "Any unique ID associated with an account such as accountID, representativeID, routing number, or userID.",
        "explode": false,
        "in": "path",
        "name": "uniqueID",
        "required": true,
        "schema": {
          "type": "string"
        },
        "style": "simple"
      },
      "WebhookID": {
        "name": "webhookID",
        "in": "path",
        "required": true,
        "description": "ID of the webhook",
        "schema": {
          "$ref": "#/components/schemas/UUID"
        }
      }
    },
    "examples": {
      "listTransfers": {
        "value": [
          {
            "transferID": "25d0d56e-334e-4aa9-adba-54f0b85d4f82",
            "createdOn": "2023-09-09T09:32:22Z",
            "status": "pending",
            "amount": {
              "currency": "USD",
              "value": 1204
            },
            "description": "Pay Instructor for May 15 Class",
            "metadata": {
              "property1": "string",
              "property2": "string"
            },
            "facilitatorFee": {
              "total": 25,
              "totalDecimal": "0.249",
              "markup": 25,
              "markupDecimal": "0.249"
            },
            "groupID": "20ea7cd5-e44c-4b30-99a7-8ec3a8d99dfe",
            "source": {
              "paymentMethodID": "2b42ad2a-7586-4e55-a268-10d585186c27",
              "paymentMethodType": "ach-debit-fund",
              "bankAccount": {
                "bankAccountID": "1c4295fb-b4cd-42a0-8631-79354fba5ffc",
                "fingerprint": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
                "status": "verified",
                "holderName": "Whole Body Fitness",
                "holderType": "business",
                "bankName": "Chase Bank",
                "bankAccountType": "checking",
                "routingNumber": "599399015",
                "lastFourAccountNumber": "7000"
              },
              "account": {
                "accountID": "3dfff852-927d-47e8-822c-2fffc57ff6b9",
                "email": "info@wholebodyfitness.com",
                "displayName": "Whole Body Fitness"
              },
              "achDetails": {
                "status": "initiated",
                "traceNumber": "124782618117",
                "debitHoldPeriod": "2-days",
                "companyEntryDescription": "Payment",
                "originatingCompanyName": "Whole Body Fit",
                "statusUpdates": {
                  "initiated": "2023-09-09T13:32:22Z",
                  "originated": "2023-09-09T16:15:09Z"
                }
              }
            },
            "destination": {
              "paymentMethodID": "8485a2ce-c9b0-4d49-bfa1-60e88a79ce31",
              "paymentMethodType": "moov-wallet",
              "wallet": {
                "walletID": "5f8549fb-eb23-4879-b8dd-138f848e8cd5"
              },
              "account": {
                "accountID": "7c99ddb3-a4f1-4474-97b7-6d8fa07baa07",
                "email": "jules.jackson@example.com",
                "displayName": "Jules Jackson"
              }
            }
          },
          {
            "transferID": "e72b3a0d-fcb4-417c-93c3-4a34f242ae52",
            "createdOn": "2023-09-09T14:15:22Z",
            "completedOn": "2023-09-10T18:23:56Z",
            "status": "completed",
            "amount": {
              "currency": "USD",
              "value": 2500
            },
            "description": "Collect monthly gym membership dues",
            "facilitatorFee": {
              "total": 127,
              "totalDecimal": "1.265",
              "markup": 25,
              "markupDecimal": "0.249"
            },
            "moovFee": 102,
            "moovFeeDecimal": "1.02",
            "groupID": "e17b4be0-6979-4764-b0dc-9487f8fb3ef4",
            "refundedAmount": {
              "currency": "USD",
              "value": 2500
            },
            "refunds": [
              {
                "refundID": "d4963079-5b35-4d17-981e-8f851753f786",
                "createdOn": "2023-09-13T08:15:22Z",
                "status": "completed",
                "amount": {
                  "currency": "USD",
                  "value": 2500
                },
                "cardDetails": {
                  "status": "completed",
                  "statusUpdates": {
                    "initiated": "2023-09-13T08:15:22Z",
                    "confirmed": "2023-09-13T08:16:58Z",
                    "settled": "2023-09-14T12:10:18Z",
                    "completed": "2023-09-14T15:20:44Z"
                  }
                }
              }
            ],
            "source": {
              "paymentMethodID": "9555d9b8-d1cf-4b71-8f0d-006397e0ec46",
              "paymentMethodType": "card-payment",
              "account": {
                "accountID": "4ac701aa-1d5d-4d6c-9319-e9de8a44f17d",
                "email": "natalie@example.com",
                "displayName": "Natalie Sharp"
              },
              "card": {
                "cardID": "4e73fb4c-dc75-4be3-bd5d-7d578db12007",
                "fingerprint": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
                "brand": "Visa",
                "cardType": "debit",
                "lastFourCardNumber": "1234",
                "expiration": {
                  "month": "01",
                  "year": "25"
                },
                "holderName": "Natalie Sharp",
                "billingAddress": {
                  "addressLine1": "123 Main Street",
                  "addressLine2": "Apt 302",
                  "city": "Boulder",
                  "stateOrProvince": "CO",
                  "postalCode": "80301",
                  "country": "US"
                },
                "cardVerification": {
                  "cvv": "match",
                  "addressLine1": "match",
                  "postalCode": "match"
                },
                "issuer": "GRINGOTTS BANK",
                "issuerCountry": "US"
              },
              "cardDetails": {
                "transactionSource": "first-recurring",
                "status": "completed",
                "dynamicDescriptor": "WhlBdy *Yoga 11-12",
                "interchangeQualification": "Visa Signature and Visa Infinite (Spend not-qualified) Product 1",
                "statusUpdates": {
                  "initiated": "2023-09-09T14:15:22Z",
                  "confirmed": "2023-09-09T14:17:12Z",
                  "settled": "2023-09-10T13:18:12Z",
                  "completed": "2023-09-10T18:23:56Z"
                }
              }
            },
            "destination": {
              "paymentMethodID": "1ae0833b-dd11-4737-9671-fefc7863a3b4",
              "paymentMethodType": "moov-wallet",
              "account": {
                "accountID": "3dfff852-927d-47e8-822c-2fffc57ff6b9",
                "email": "amanda@classbooker.dev",
                "displayName": "Whole Body Fitness"
              },
              "wallet": {
                "walletID": "81fa4538-8e10-4499-9efd-c455863dae3e"
              }
            }
          }
        ]
      },
      "getTransferCardToWallet": {
        "value": {
          "transferID": "e72b3a0d-fcb4-417c-93c3-4a34f242ae52",
          "createdOn": "2023-09-09T14:15:22Z",
          "completedOn": "2023-09-10T18:23:56Z",
          "status": "completed",
          "amount": {
            "currency": "USD",
            "value": 10000
          },
          "description": "Collect monthly gym membership dues",
          "facilitatorFee": {
            "total": 127,
            "totalDecimal": "1.265",
            "markup": 25,
            "markupDecimal": "0.249"
          },
          "moovFee": 223,
          "moovFeeDecimal": "2.23",
          "moovFeeDetails": {
            "cardScheme": "20.1575",
            "interchange": "2.10",
            "moovProcessing": ".0567"
          },
          "groupID": "e17b4be0-6979-4764-b0dc-9487f8fb3ef4",
          "refundedAmount": {
            "currency": "USD",
            "value": 10000
          },
          "refunds": [
            {
              "refundID": "d4963079-5b35-4d17-981e-8f851753f786",
              "createdOn": "2023-09-13T08:15:22Z",
              "updatedOn": "2023-09-14T15:20:44Z",
              "status": "completed",
              "amount": {
                "currency": "USD",
                "value": 10000
              },
              "cardDetails": {
                "status": "completed",
                "statusUpdates": {
                  "initiated": "2023-09-13T08:15:22Z",
                  "confirmed": "2023-09-13T08:16:58Z",
                  "settled": "2023-09-14T12:10:18Z",
                  "completed": "2023-09-14T15:20:44z"
                }
              }
            }
          ],
          "source": {
            "paymentMethodID": "9555d9b8-d1cf-4b71-8f0d-006397e0ec46",
            "paymentMethodType": "card-payment",
            "account": {
              "accountID": "4ac701aa-1d5d-4d6c-9319-e9de8a44f17d",
              "email": "natalie@example.com",
              "displayName": "Natalie Sharp"
            },
            "card": {
              "cardID": "4e73fb4c-dc75-4be3-bd5d-7d578db12007",
              "fingerprint": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
              "brand": "American Express",
              "cardType": "debit",
              "lastFourCardNumber": "1234",
              "expiration": {
                "month": "01",
                "year": "25"
              },
              "holderName": "Natalie Sharp",
              "billingAddress": {
                "addressLine1": "123 Main Street",
                "addressLine2": "Apt 302",
                "city": "Boulder",
                "stateOrProvince": "CO",
                "postalCode": "80301",
                "country": "US"
              },
              "cardVerification": {
                "cvv": "match",
                "addressLine1": "match",
                "postalCode": "match"
              },
              "issuer": "GRINGOTTS BANK",
              "issuerCountry": "US"
            },
            "cardDetails": {
              "status": "completed",
              "transactionSource": "recurring",
              "interchangeQualification": "Visa Signature and Visa Infinite (Spend not-qualified) Product 1",
              "statusUpdates": {
                "initiated": "2023-09-09T14:15:22Z",
                "confirmed": "2023-09-09T14:17:12Z",
                "settled": "2023-09-10T13:18:12Z",
                "completed": "2023-09-10T18:23:56Z"
              }
            }
          },
          "destination": {
            "paymentMethodID": "1ae0833b-dd11-4737-9671-fefc7863a3b4",
            "paymentMethodType": "moov-wallet",
            "account": {
              "accountID": "3dfff852-927d-47e8-822c-2fffc57ff6b9",
              "email": "amanda@classbooker.dev",
              "displayName": "Whole Body Fitness"
            },
            "wallet": {
              "walletID": "81fa4538-8e10-4499-9efd-c455863dae3e"
            }
          }
        }
      },
      "getTransferBankToWallet": {
        "value": {
          "transferID": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
          "createdOn": "2023-09-09T14:15:22Z",
          "status": "pending",
          "amount": {
            "currency": "USD",
            "value": 1204
          },
          "description": "Pay Instructor for May 15 Class",
          "metadata": {
            "property1": "string",
            "property2": "string"
          },
          "facilitatorFee": {
            "total": 0,
            "totalDecimal": "0.001",
            "markup": 0,
            "markupDecimal": "0.001"
          },
          "moovFee": 0,
          "groupID": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
          "refundedAmount": {
            "currency": "USD",
            "value": 1204
          },
          "source": {
            "paymentMethodID": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
            "paymentMethodType": "ach-credit-same-day",
            "account": {
              "accountID": "3dfff852-927d-47e8-822c-2fffc57ff6b9",
              "email": "amanda@classbooker.dev",
              "displayName": "Whole Body Fitness"
            },
            "bankAccount": {
              "bankAccountID": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
              "fingerprint": "9948962d92a1ce40c9f918cd9ece3a22bde62fb325a2f1fe2e833969de672ba3",
              "status": "new",
              "holderName": "Jules Jackson",
              "holderType": "individual",
              "bankName": "Chase Bank",
              "bankAccountType": "checking",
              "routingNumber": "string",
              "lastFourAccountNumber": "7000"
            },
            "achDetails": {
              "status": "initiated",
              "traceNumber": "124782618117",
              "return": {
                "code": "string",
                "reason": "string",
                "description": "string"
              },
              "correction": {
                "code": "string",
                "reason": "string",
                "description": "string"
              },
              "companyEntryDescription": "Gym Dues",
              "originatingCompanyName": "Whole Body Fit",
              "debitHoldPeriod": "2-days",
              "statusUpdates": {
                "initiated": "2023-09-09T14:15:22Z",
                "originated": "2023-09-09T14:17:12Z",
                "corrected": "2023-09-09T20:34:12Z"
              }
            },
            "transferID": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43"
          },
          "destination": {
            "paymentMethodID": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43",
            "paymentMethodType": "moov-wallet",
            "account": {
              "accountID": "3dfff852-927d-47e8-822c-2fffc57ff6b9",
              "email": "amanda@classbooker.dev",
              "displayName": "Whole Body Fitness"
            },
            "wallet": {
              "walletID": "ec7e1848-dc80-4ab0-8827-dd7fc0737b43"
            }
          }
        }
      },
      "createSyncRefundSuccess": {
        "value": {
          "refundID": "d4963079-5b35-4d17-981e-8f851753f786",
          "createdOn": "2023-09-09T14:15:22Z",
          "updatedOn": "2023-09-09T14:17:41Z",
          "status": "pending",
          "amount": {
            "currency": "USD",
            "value": 1204
          },
          "cardDetails": {
            "status": "confirmed",
            "statusUpdates": {
              "confirmed": "2023-09-09T14:17:41Z"
            }
          }
        }
      },
      "createSyncRefundFailure": {
        "value": {
          "refundID": "d4963079-5b35-4d17-981e-8f851753f786",
          "createdOn": "2023-09-09T14:15:22Z",
          "updatedOn": "2023-09-09T14:15:59Z",
          "status": "failed",
          "failureCode": "insufficient-funds",
          "amount": {
            "currency": "USD",
            "value": 1204
          },
          "cardDetails": {
            "status": "failed",
            "statusUpdates": {
              "failed": "2023-09-09T14:15:59Z"
            }
          }
        }
      },
      "createAsyncRefund": {
        "value": {
          "refundID": "d4963079-5b35-4d17-981e-8f851753f786",
          "createdOn": "2023-09-09T14:15:22Z",
          "amount": {
            "currency": "USD",
            "value": 1204
          }
        }
      },
      "createSyncRefundTimeout": {
        "value": {
          "refundID": "d4963079-5b35-4d17-981e-8f851753f786",
          "createdOn": "2023-09-09T14:15:22Z",
          "updatedOn": "2023-09-09T14:15:22Z",
          "status": "created",
          "amount": {
            "currency": "USD",
            "value": 1204
          }
        }
      },
      "createCancellationSuccess": {
        "value": {
          "status": "completed",
          "createdOn": "2023-09-09T14:15:22Z"
        }
      }
    }
  }
}
